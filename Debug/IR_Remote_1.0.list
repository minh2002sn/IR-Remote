
IR_Remote_1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080040d0  080040d0  000140d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004138  08004138  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004138  08004138  00014138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004140  08004140  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004140  08004140  00014140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004144  08004144  00014144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000070  080041b8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  080041b8  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e52e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f1a  00000000  00000000  0002e5ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  000304e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  00031188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016afe  00000000  00000000  00031d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ebe8  00000000  00000000  0004885e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e658  00000000  00000000  00057446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5a9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003888  00000000  00000000  000e5af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080040b8 	.word	0x080040b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080040b8 	.word	0x080040b8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */

IR_DATA_t ir_remote;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	80fb      	strh	r3, [r7, #6]
	IR_REMOTE_EXTI_Handle(&ir_remote);
 800059e:	4803      	ldr	r0, [pc, #12]	; (80005ac <HAL_GPIO_EXTI_Callback+0x18>)
 80005a0:	f002 ff5a 	bl	8003458 <IR_REMOTE_EXTI_Handle>
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000118 	.word	0x20000118

080005b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	IR_REMOTE_TIMI_Handle(&ir_remote, htim);
 80005b8:	6879      	ldr	r1, [r7, #4]
 80005ba:	4803      	ldr	r0, [pc, #12]	; (80005c8 <HAL_TIM_PeriodElapsedCallback+0x18>)
 80005bc:	f002 ff78 	bl	80034b0 <IR_REMOTE_TIMI_Handle>
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000118 	.word	0x20000118

080005cc <IR_REMOTE_RxCpltCallback>:

void IR_REMOTE_RxCpltCallback(DECODED_DATA_t *decode_value)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	; 0x28
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	char temp_str[30];
	sprintf(temp_str, "Add:0x%02X - Cmd:0x%02X\n", decode_value->value.NEC.address, decode_value->value.NEC.command);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	785b      	ldrb	r3, [r3, #1]
 80005d8:	461a      	mov	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	789b      	ldrb	r3, [r3, #2]
 80005de:	f107 0008 	add.w	r0, r7, #8
 80005e2:	490a      	ldr	r1, [pc, #40]	; (800060c <IR_REMOTE_RxCpltCallback+0x40>)
 80005e4:	f003 f8fa 	bl	80037dc <siprintf>
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)temp_str, strlen(temp_str));
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff fdf7 	bl	80001e0 <strlen>
 80005f2:	4603      	mov	r3, r0
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	f107 0308 	add.w	r3, r7, #8
 80005fa:	4619      	mov	r1, r3
 80005fc:	4804      	ldr	r0, [pc, #16]	; (8000610 <IR_REMOTE_RxCpltCallback+0x44>)
 80005fe:	f001 ffd6 	bl	80025ae <HAL_UART_Transmit_IT>
}
 8000602:	bf00      	nop
 8000604:	3728      	adds	r7, #40	; 0x28
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	080040d0 	.word	0x080040d0
 8000610:	200000d4 	.word	0x200000d4

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 facb 	bl	8000bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f815 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f8f1 	bl	8000808 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000626:	f000 f8c5 	bl	80007b4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800062a:	f000 f877 	bl	800071c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  IR_REMOTE_Init(&ir_remote, GPIOA, GPIO_PIN_4, &htim2, DECODE_TYPE_NEC);
 800062e:	2300      	movs	r3, #0
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	4b03      	ldr	r3, [pc, #12]	; (8000640 <main+0x2c>)
 8000634:	2210      	movs	r2, #16
 8000636:	4903      	ldr	r1, [pc, #12]	; (8000644 <main+0x30>)
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <main+0x34>)
 800063a:	f002 fef2 	bl	8003422 <IR_REMOTE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063e:	e7fe      	b.n	800063e <main+0x2a>
 8000640:	2000008c 	.word	0x2000008c
 8000644:	40020000 	.word	0x40020000
 8000648:	20000118 	.word	0x20000118

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	2230      	movs	r2, #48	; 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f003 f8b6 	bl	80037cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	4b27      	ldr	r3, [pc, #156]	; (8000714 <SystemClock_Config+0xc8>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	4a26      	ldr	r2, [pc, #152]	; (8000714 <SystemClock_Config+0xc8>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	; 0x40
 8000680:	4b24      	ldr	r3, [pc, #144]	; (8000714 <SystemClock_Config+0xc8>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4b21      	ldr	r3, [pc, #132]	; (8000718 <SystemClock_Config+0xcc>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a20      	ldr	r2, [pc, #128]	; (8000718 <SystemClock_Config+0xcc>)
 8000696:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <SystemClock_Config+0xcc>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2310      	movs	r3, #16
 80006b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006bc:	2308      	movs	r3, #8
 80006be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006c0:	2348      	movs	r3, #72	; 0x48
 80006c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fe53 	bl	800137c <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006dc:	f000 f90e 	bl	80008fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e4:	2302      	movs	r3, #2
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	2102      	movs	r1, #2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 f8b5 	bl	800186c <HAL_RCC_ClockConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000708:	f000 f8f8 	bl	80008fc <Error_Handler>
  }
}
 800070c:	bf00      	nop
 800070e:	3750      	adds	r7, #80	; 0x50
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000722:	f107 0308 	add.w	r3, r7, #8
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000730:	463b      	mov	r3, r7
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000738:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <MX_TIM2_Init+0x94>)
 800073a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800073e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 30;
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MX_TIM2_Init+0x94>)
 8000742:	221e      	movs	r2, #30
 8000744:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_TIM2_Init+0x94>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_TIM2_Init+0x94>)
 800074e:	f04f 32ff 	mov.w	r2, #4294967295
 8000752:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000754:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <MX_TIM2_Init+0x94>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_TIM2_Init+0x94>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000760:	4813      	ldr	r0, [pc, #76]	; (80007b0 <MX_TIM2_Init+0x94>)
 8000762:	f001 fa63 	bl	8001c2c <HAL_TIM_Base_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800076c:	f000 f8c6 	bl	80008fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000774:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	4619      	mov	r1, r3
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <MX_TIM2_Init+0x94>)
 800077e:	f001 fc3e 	bl	8001ffe <HAL_TIM_ConfigClockSource>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000788:	f000 f8b8 	bl	80008fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078c:	2300      	movs	r3, #0
 800078e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000794:	463b      	mov	r3, r7
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_TIM2_Init+0x94>)
 800079a:	f001 fe39 	bl	8002410 <HAL_TIMEx_MasterConfigSynchronization>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007a4:	f000 f8aa 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	2000008c 	.word	0x2000008c

080007b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007ba:	4a12      	ldr	r2, [pc, #72]	; (8000804 <MX_USART2_UART_Init+0x50>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007ec:	f001 fe92 	bl	8002514 <HAL_UART_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007f6:	f000 f881 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200000d4 	.word	0x200000d4
 8000804:	40004400 	.word	0x40004400

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	4b33      	ldr	r3, [pc, #204]	; (80008f0 <MX_GPIO_Init+0xe8>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a32      	ldr	r2, [pc, #200]	; (80008f0 <MX_GPIO_Init+0xe8>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b30      	ldr	r3, [pc, #192]	; (80008f0 <MX_GPIO_Init+0xe8>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b2c      	ldr	r3, [pc, #176]	; (80008f0 <MX_GPIO_Init+0xe8>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a2b      	ldr	r2, [pc, #172]	; (80008f0 <MX_GPIO_Init+0xe8>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <MX_GPIO_Init+0xe8>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2120      	movs	r1, #32
 800085a:	4826      	ldr	r0, [pc, #152]	; (80008f4 <MX_GPIO_Init+0xec>)
 800085c:	f000 fd5c 	bl	8001318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000866:	4824      	ldr	r0, [pc, #144]	; (80008f8 <MX_GPIO_Init+0xf0>)
 8000868:	f000 fd56 	bl	8001318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800086c:	2301      	movs	r3, #1
 800086e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	4619      	mov	r1, r3
 800087e:	481d      	ldr	r0, [pc, #116]	; (80008f4 <MX_GPIO_Init+0xec>)
 8000880:	f000 fbae 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000884:	2310      	movs	r3, #16
 8000886:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000888:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800088c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	4619      	mov	r1, r3
 8000898:	4816      	ldr	r0, [pc, #88]	; (80008f4 <MX_GPIO_Init+0xec>)
 800089a:	f000 fba1 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800089e:	2320      	movs	r3, #32
 80008a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	4619      	mov	r1, r3
 80008b4:	480f      	ldr	r0, [pc, #60]	; (80008f4 <MX_GPIO_Init+0xec>)
 80008b6:	f000 fb93 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008ba:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	4619      	mov	r1, r3
 80008d2:	4809      	ldr	r0, [pc, #36]	; (80008f8 <MX_GPIO_Init+0xf0>)
 80008d4:	f000 fb84 	bl	8000fe0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	2100      	movs	r1, #0
 80008dc:	200a      	movs	r0, #10
 80008de:	f000 fab6 	bl	8000e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80008e2:	200a      	movs	r0, #10
 80008e4:	f000 facf 	bl	8000e86 <HAL_NVIC_EnableIRQ>

}
 80008e8:	bf00      	nop
 80008ea:	3720      	adds	r7, #32
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020000 	.word	0x40020000
 80008f8:	40020c00 	.word	0x40020c00

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000904:	e7fe      	b.n	8000904 <Error_Handler+0x8>
	...

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	4a0f      	ldr	r2, [pc, #60]	; (8000954 <HAL_MspInit+0x4c>)
 8000918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091c:	6453      	str	r3, [r2, #68]	; 0x44
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <HAL_MspInit+0x4c>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	4a08      	ldr	r2, [pc, #32]	; (8000954 <HAL_MspInit+0x4c>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000938:	6413      	str	r3, [r2, #64]	; 0x40
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_MspInit+0x4c>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800

08000958 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000968:	d115      	bne.n	8000996 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <HAL_TIM_Base_MspInit+0x48>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <HAL_TIM_Base_MspInit+0x48>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6413      	str	r3, [r2, #64]	; 0x40
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_TIM_Base_MspInit+0x48>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	201c      	movs	r0, #28
 800098c:	f000 fa5f 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000990:	201c      	movs	r0, #28
 8000992:	f000 fa78 	bl	8000e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800

080009a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a1d      	ldr	r2, [pc, #116]	; (8000a38 <HAL_UART_MspInit+0x94>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d133      	bne.n	8000a2e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <HAL_UART_MspInit+0x98>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	4a1b      	ldr	r2, [pc, #108]	; (8000a3c <HAL_UART_MspInit+0x98>)
 80009d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d4:	6413      	str	r3, [r2, #64]	; 0x40
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <HAL_UART_MspInit+0x98>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <HAL_UART_MspInit+0x98>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a14      	ldr	r2, [pc, #80]	; (8000a3c <HAL_UART_MspInit+0x98>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <HAL_UART_MspInit+0x98>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009fe:	230c      	movs	r3, #12
 8000a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a0e:	2307      	movs	r3, #7
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	4809      	ldr	r0, [pc, #36]	; (8000a40 <HAL_UART_MspInit+0x9c>)
 8000a1a:	f000 fae1 	bl	8000fe0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	2026      	movs	r0, #38	; 0x26
 8000a24:	f000 fa13 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a28:	2026      	movs	r0, #38	; 0x26
 8000a2a:	f000 fa2c 	bl	8000e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a2e:	bf00      	nop
 8000a30:	3728      	adds	r7, #40	; 0x28
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40004400 	.word	0x40004400
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020000 	.word	0x40020000

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <NMI_Handler+0x4>

08000a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <MemManage_Handler+0x4>

08000a56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a90:	f000 f8e2 	bl	8000c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000a9c:	2010      	movs	r0, #16
 8000a9e:	f000 fc55 	bl	800134c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <TIM2_IRQHandler+0x10>)
 8000aae:	f001 f99e 	bl	8001dee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2000008c 	.word	0x2000008c

08000abc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <USART2_IRQHandler+0x10>)
 8000ac2:	f001 fdb9 	bl	8002638 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200000d4 	.word	0x200000d4

08000ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad8:	4a14      	ldr	r2, [pc, #80]	; (8000b2c <_sbrk+0x5c>)
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <_sbrk+0x60>)
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d102      	bne.n	8000af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <_sbrk+0x64>)
 8000aee:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <_sbrk+0x68>)
 8000af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <_sbrk+0x64>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d207      	bcs.n	8000b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b00:	f002 fe3a 	bl	8003778 <__errno>
 8000b04:	4603      	mov	r3, r0
 8000b06:	220c      	movs	r2, #12
 8000b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0e:	e009      	b.n	8000b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b16:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <_sbrk+0x64>)
 8000b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b22:	68fb      	ldr	r3, [r7, #12]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20020000 	.word	0x20020000
 8000b30:	00000400 	.word	0x00000400
 8000b34:	200002c0 	.word	0x200002c0
 8000b38:	200002d8 	.word	0x200002d8

08000b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <SystemInit+0x20>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <SystemInit+0x20>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b66:	490e      	ldr	r1, [pc, #56]	; (8000ba0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b68:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b6c:	e002      	b.n	8000b74 <LoopCopyDataInit>

08000b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b72:	3304      	adds	r3, #4

08000b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b78:	d3f9      	bcc.n	8000b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b7c:	4c0b      	ldr	r4, [pc, #44]	; (8000bac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b80:	e001      	b.n	8000b86 <LoopFillZerobss>

08000b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b84:	3204      	adds	r2, #4

08000b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b88:	d3fb      	bcc.n	8000b82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b8a:	f7ff ffd7 	bl	8000b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f002 fdf9 	bl	8003784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b92:	f7ff fd3f 	bl	8000614 <main>
  bx  lr    
 8000b96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ba4:	08004148 	.word	0x08004148
  ldr r2, =_sbss
 8000ba8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bac:	200002d8 	.word	0x200002d8

08000bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC_IRQHandler>
	...

08000bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <HAL_Init+0x40>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	; (8000bf4 <HAL_Init+0x40>)
 8000bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <HAL_Init+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <HAL_Init+0x40>)
 8000bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <HAL_Init+0x40>)
 8000bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f000 f92b 	bl	8000e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be2:	200f      	movs	r0, #15
 8000be4:	f000 f808 	bl	8000bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be8:	f7ff fe8e 	bl	8000908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023c00 	.word	0x40023c00

08000bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_InitTick+0x54>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_InitTick+0x58>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 f943 	bl	8000ea2 <HAL_SYSTICK_Config>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00e      	b.n	8000c44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b0f      	cmp	r3, #15
 8000c2a:	d80a      	bhi.n	8000c42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	f000 f90b 	bl	8000e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c38:	4a06      	ldr	r2, [pc, #24]	; (8000c54 <HAL_InitTick+0x5c>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e000      	b.n	8000c44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	20000008 	.word	0x20000008
 8000c54:	20000004 	.word	0x20000004

08000c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_IncTick+0x20>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_IncTick+0x24>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <HAL_IncTick+0x24>)
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	200002c4 	.word	0x200002c4

08000c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <HAL_GetTick+0x14>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	200002c4 	.word	0x200002c4

08000c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	db0b      	blt.n	8000d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f003 021f 	and.w	r2, r3, #31
 8000d14:	4907      	ldr	r1, [pc, #28]	; (8000d34 <__NVIC_EnableIRQ+0x38>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	095b      	lsrs	r3, r3, #5
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000e100 	.word	0xe000e100

08000d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	db0a      	blt.n	8000d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	490c      	ldr	r1, [pc, #48]	; (8000d84 <__NVIC_SetPriority+0x4c>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	0112      	lsls	r2, r2, #4
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	440b      	add	r3, r1
 8000d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d60:	e00a      	b.n	8000d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4908      	ldr	r1, [pc, #32]	; (8000d88 <__NVIC_SetPriority+0x50>)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f003 030f 	and.w	r3, r3, #15
 8000d6e:	3b04      	subs	r3, #4
 8000d70:	0112      	lsls	r2, r2, #4
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	440b      	add	r3, r1
 8000d76:	761a      	strb	r2, [r3, #24]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000e100 	.word	0xe000e100
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	; 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	f1c3 0307 	rsb	r3, r3, #7
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	bf28      	it	cs
 8000daa:	2304      	movcs	r3, #4
 8000dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3304      	adds	r3, #4
 8000db2:	2b06      	cmp	r3, #6
 8000db4:	d902      	bls.n	8000dbc <NVIC_EncodePriority+0x30>
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3b03      	subs	r3, #3
 8000dba:	e000      	b.n	8000dbe <NVIC_EncodePriority+0x32>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	401a      	ands	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fa01 f303 	lsl.w	r3, r1, r3
 8000dde:	43d9      	mvns	r1, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	4313      	orrs	r3, r2
         );
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3724      	adds	r7, #36	; 0x24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e04:	d301      	bcc.n	8000e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00f      	b.n	8000e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <SysTick_Config+0x40>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e12:	210f      	movs	r1, #15
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
 8000e18:	f7ff ff8e 	bl	8000d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <SysTick_Config+0x40>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e22:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <SysTick_Config+0x40>)
 8000e24:	2207      	movs	r2, #7
 8000e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	e000e010 	.word	0xe000e010

08000e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ff29 	bl	8000c98 <__NVIC_SetPriorityGrouping>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b086      	sub	sp, #24
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]
 8000e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e60:	f7ff ff3e 	bl	8000ce0 <__NVIC_GetPriorityGrouping>
 8000e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	68b9      	ldr	r1, [r7, #8]
 8000e6a:	6978      	ldr	r0, [r7, #20]
 8000e6c:	f7ff ff8e 	bl	8000d8c <NVIC_EncodePriority>
 8000e70:	4602      	mov	r2, r0
 8000e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e76:	4611      	mov	r1, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff5d 	bl	8000d38 <__NVIC_SetPriority>
}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff31 	bl	8000cfc <__NVIC_EnableIRQ>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ffa2 	bl	8000df4 <SysTick_Config>
 8000eb0:	4603      	mov	r3, r0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b084      	sub	sp, #16
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ec8:	f7ff feda 	bl	8000c80 <HAL_GetTick>
 8000ecc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d008      	beq.n	8000eec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2280      	movs	r2, #128	; 0x80
 8000ede:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e052      	b.n	8000f92 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f022 0216 	bic.w	r2, r2, #22
 8000efa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	695a      	ldr	r2, [r3, #20]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f0a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d103      	bne.n	8000f1c <HAL_DMA_Abort+0x62>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d007      	beq.n	8000f2c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 0208 	bic.w	r2, r2, #8
 8000f2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f022 0201 	bic.w	r2, r2, #1
 8000f3a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f3c:	e013      	b.n	8000f66 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f3e:	f7ff fe9f 	bl	8000c80 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b05      	cmp	r3, #5
 8000f4a:	d90c      	bls.n	8000f66 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2220      	movs	r2, #32
 8000f50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2203      	movs	r2, #3
 8000f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e015      	b.n	8000f92 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1e4      	bne.n	8000f3e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f78:	223f      	movs	r2, #63	; 0x3f
 8000f7a:	409a      	lsls	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d004      	beq.n	8000fb8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2280      	movs	r2, #128	; 0x80
 8000fb2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e00c      	b.n	8000fd2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2205      	movs	r2, #5
 8000fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f022 0201 	bic.w	r2, r2, #1
 8000fce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
 8000ffa:	e159      	b.n	80012b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	429a      	cmp	r2, r3
 8001016:	f040 8148 	bne.w	80012aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	2b01      	cmp	r3, #1
 8001024:	d005      	beq.n	8001032 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800102e:	2b02      	cmp	r3, #2
 8001030:	d130      	bne.n	8001094 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	2203      	movs	r2, #3
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	68da      	ldr	r2, [r3, #12]
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001068:	2201      	movs	r2, #1
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	091b      	lsrs	r3, r3, #4
 800107e:	f003 0201 	and.w	r2, r3, #1
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	2b03      	cmp	r3, #3
 800109e:	d017      	beq.n	80010d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	2203      	movs	r2, #3
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d123      	bne.n	8001124 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	08da      	lsrs	r2, r3, #3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3208      	adds	r2, #8
 80010e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	f003 0307 	and.w	r3, r3, #7
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	220f      	movs	r2, #15
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	691a      	ldr	r2, [r3, #16]
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	08da      	lsrs	r2, r3, #3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3208      	adds	r2, #8
 800111e:	69b9      	ldr	r1, [r7, #24]
 8001120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0203 	and.w	r2, r3, #3
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001160:	2b00      	cmp	r3, #0
 8001162:	f000 80a2 	beq.w	80012aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	4b57      	ldr	r3, [pc, #348]	; (80012c8 <HAL_GPIO_Init+0x2e8>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	4a56      	ldr	r2, [pc, #344]	; (80012c8 <HAL_GPIO_Init+0x2e8>)
 8001170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001174:	6453      	str	r3, [r2, #68]	; 0x44
 8001176:	4b54      	ldr	r3, [pc, #336]	; (80012c8 <HAL_GPIO_Init+0x2e8>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001182:	4a52      	ldr	r2, [pc, #328]	; (80012cc <HAL_GPIO_Init+0x2ec>)
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	3302      	adds	r3, #2
 800118a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	220f      	movs	r2, #15
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a49      	ldr	r2, [pc, #292]	; (80012d0 <HAL_GPIO_Init+0x2f0>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d019      	beq.n	80011e2 <HAL_GPIO_Init+0x202>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a48      	ldr	r2, [pc, #288]	; (80012d4 <HAL_GPIO_Init+0x2f4>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d013      	beq.n	80011de <HAL_GPIO_Init+0x1fe>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a47      	ldr	r2, [pc, #284]	; (80012d8 <HAL_GPIO_Init+0x2f8>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d00d      	beq.n	80011da <HAL_GPIO_Init+0x1fa>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a46      	ldr	r2, [pc, #280]	; (80012dc <HAL_GPIO_Init+0x2fc>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d007      	beq.n	80011d6 <HAL_GPIO_Init+0x1f6>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a45      	ldr	r2, [pc, #276]	; (80012e0 <HAL_GPIO_Init+0x300>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d101      	bne.n	80011d2 <HAL_GPIO_Init+0x1f2>
 80011ce:	2304      	movs	r3, #4
 80011d0:	e008      	b.n	80011e4 <HAL_GPIO_Init+0x204>
 80011d2:	2307      	movs	r3, #7
 80011d4:	e006      	b.n	80011e4 <HAL_GPIO_Init+0x204>
 80011d6:	2303      	movs	r3, #3
 80011d8:	e004      	b.n	80011e4 <HAL_GPIO_Init+0x204>
 80011da:	2302      	movs	r3, #2
 80011dc:	e002      	b.n	80011e4 <HAL_GPIO_Init+0x204>
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <HAL_GPIO_Init+0x204>
 80011e2:	2300      	movs	r3, #0
 80011e4:	69fa      	ldr	r2, [r7, #28]
 80011e6:	f002 0203 	and.w	r2, r2, #3
 80011ea:	0092      	lsls	r2, r2, #2
 80011ec:	4093      	lsls	r3, r2
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011f4:	4935      	ldr	r1, [pc, #212]	; (80012cc <HAL_GPIO_Init+0x2ec>)
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	089b      	lsrs	r3, r3, #2
 80011fa:	3302      	adds	r3, #2
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001202:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <HAL_GPIO_Init+0x304>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001226:	4a2f      	ldr	r2, [pc, #188]	; (80012e4 <HAL_GPIO_Init+0x304>)
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800122c:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <HAL_GPIO_Init+0x304>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001250:	4a24      	ldr	r2, [pc, #144]	; (80012e4 <HAL_GPIO_Init+0x304>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001256:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <HAL_GPIO_Init+0x304>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800127a:	4a1a      	ldr	r2, [pc, #104]	; (80012e4 <HAL_GPIO_Init+0x304>)
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001280:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <HAL_GPIO_Init+0x304>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a4:	4a0f      	ldr	r2, [pc, #60]	; (80012e4 <HAL_GPIO_Init+0x304>)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3301      	adds	r3, #1
 80012ae:	61fb      	str	r3, [r7, #28]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	2b0f      	cmp	r3, #15
 80012b4:	f67f aea2 	bls.w	8000ffc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012b8:	bf00      	nop
 80012ba:	bf00      	nop
 80012bc:	3724      	adds	r7, #36	; 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40013800 	.word	0x40013800
 80012d0:	40020000 	.word	0x40020000
 80012d4:	40020400 	.word	0x40020400
 80012d8:	40020800 	.word	0x40020800
 80012dc:	40020c00 	.word	0x40020c00
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40013c00 	.word	0x40013c00

080012e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691a      	ldr	r2, [r3, #16]
 80012f8:	887b      	ldrh	r3, [r7, #2]
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d002      	beq.n	8001306 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001300:	2301      	movs	r3, #1
 8001302:	73fb      	strb	r3, [r7, #15]
 8001304:	e001      	b.n	800130a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001306:	2300      	movs	r3, #0
 8001308:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800130a:	7bfb      	ldrb	r3, [r7, #15]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	807b      	strh	r3, [r7, #2]
 8001324:	4613      	mov	r3, r2
 8001326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001328:	787b      	ldrb	r3, [r7, #1]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800132e:	887a      	ldrh	r2, [r7, #2]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001334:	e003      	b.n	800133e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001336:	887b      	ldrh	r3, [r7, #2]
 8001338:	041a      	lsls	r2, r3, #16
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	619a      	str	r2, [r3, #24]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001358:	695a      	ldr	r2, [r3, #20]
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	4013      	ands	r3, r2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d006      	beq.n	8001370 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001362:	4a05      	ldr	r2, [pc, #20]	; (8001378 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f912 	bl	8000594 <HAL_GPIO_EXTI_Callback>
  }
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40013c00 	.word	0x40013c00

0800137c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e267      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b00      	cmp	r3, #0
 8001398:	d075      	beq.n	8001486 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800139a:	4b88      	ldr	r3, [pc, #544]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 030c 	and.w	r3, r3, #12
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d00c      	beq.n	80013c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013a6:	4b85      	ldr	r3, [pc, #532]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ae:	2b08      	cmp	r3, #8
 80013b0:	d112      	bne.n	80013d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013b2:	4b82      	ldr	r3, [pc, #520]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013be:	d10b      	bne.n	80013d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c0:	4b7e      	ldr	r3, [pc, #504]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d05b      	beq.n	8001484 <HAL_RCC_OscConfig+0x108>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d157      	bne.n	8001484 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e242      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e0:	d106      	bne.n	80013f0 <HAL_RCC_OscConfig+0x74>
 80013e2:	4b76      	ldr	r3, [pc, #472]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a75      	ldr	r2, [pc, #468]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 80013e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e01d      	b.n	800142c <HAL_RCC_OscConfig+0xb0>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013f8:	d10c      	bne.n	8001414 <HAL_RCC_OscConfig+0x98>
 80013fa:	4b70      	ldr	r3, [pc, #448]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a6f      	ldr	r2, [pc, #444]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 8001400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	4b6d      	ldr	r3, [pc, #436]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a6c      	ldr	r2, [pc, #432]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 800140c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e00b      	b.n	800142c <HAL_RCC_OscConfig+0xb0>
 8001414:	4b69      	ldr	r3, [pc, #420]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a68      	ldr	r2, [pc, #416]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 800141a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b66      	ldr	r3, [pc, #408]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a65      	ldr	r2, [pc, #404]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 8001426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d013      	beq.n	800145c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7ff fc24 	bl	8000c80 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800143c:	f7ff fc20 	bl	8000c80 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b64      	cmp	r3, #100	; 0x64
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e207      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144e:	4b5b      	ldr	r3, [pc, #364]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0xc0>
 800145a:	e014      	b.n	8001486 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fc10 	bl	8000c80 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001464:	f7ff fc0c 	bl	8000c80 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	; 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e1f3      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001476:	4b51      	ldr	r3, [pc, #324]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0xe8>
 8001482:	e000      	b.n	8001486 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d063      	beq.n	800155a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001492:	4b4a      	ldr	r3, [pc, #296]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 030c 	and.w	r3, r3, #12
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00b      	beq.n	80014b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800149e:	4b47      	ldr	r3, [pc, #284]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d11c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014aa:	4b44      	ldr	r3, [pc, #272]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d116      	bne.n	80014e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b6:	4b41      	ldr	r3, [pc, #260]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d005      	beq.n	80014ce <HAL_RCC_OscConfig+0x152>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d001      	beq.n	80014ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e1c7      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ce:	4b3b      	ldr	r3, [pc, #236]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	4937      	ldr	r1, [pc, #220]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e2:	e03a      	b.n	800155a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d020      	beq.n	800152e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ec:	4b34      	ldr	r3, [pc, #208]	; (80015c0 <HAL_RCC_OscConfig+0x244>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f2:	f7ff fbc5 	bl	8000c80 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014fa:	f7ff fbc1 	bl	8000c80 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e1a8      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150c:	4b2b      	ldr	r3, [pc, #172]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001518:	4b28      	ldr	r3, [pc, #160]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	4925      	ldr	r1, [pc, #148]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 8001528:	4313      	orrs	r3, r2
 800152a:	600b      	str	r3, [r1, #0]
 800152c:	e015      	b.n	800155a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800152e:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <HAL_RCC_OscConfig+0x244>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001534:	f7ff fba4 	bl	8000c80 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800153c:	f7ff fba0 	bl	8000c80 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e187      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154e:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d036      	beq.n	80015d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d016      	beq.n	800159c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <HAL_RCC_OscConfig+0x248>)
 8001570:	2201      	movs	r2, #1
 8001572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001574:	f7ff fb84 	bl	8000c80 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800157c:	f7ff fb80 	bl	8000c80 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e167      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <HAL_RCC_OscConfig+0x240>)
 8001590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0x200>
 800159a:	e01b      	b.n	80015d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_RCC_OscConfig+0x248>)
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a2:	f7ff fb6d 	bl	8000c80 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a8:	e00e      	b.n	80015c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015aa:	f7ff fb69 	bl	8000c80 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d907      	bls.n	80015c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e150      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
 80015bc:	40023800 	.word	0x40023800
 80015c0:	42470000 	.word	0x42470000
 80015c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c8:	4b88      	ldr	r3, [pc, #544]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 80015ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1ea      	bne.n	80015aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 8097 	beq.w	8001710 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015e6:	4b81      	ldr	r3, [pc, #516]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10f      	bne.n	8001612 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	4b7d      	ldr	r3, [pc, #500]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	4a7c      	ldr	r2, [pc, #496]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 80015fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001600:	6413      	str	r3, [r2, #64]	; 0x40
 8001602:	4b7a      	ldr	r3, [pc, #488]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800160e:	2301      	movs	r3, #1
 8001610:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001612:	4b77      	ldr	r3, [pc, #476]	; (80017f0 <HAL_RCC_OscConfig+0x474>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161a:	2b00      	cmp	r3, #0
 800161c:	d118      	bne.n	8001650 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800161e:	4b74      	ldr	r3, [pc, #464]	; (80017f0 <HAL_RCC_OscConfig+0x474>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a73      	ldr	r2, [pc, #460]	; (80017f0 <HAL_RCC_OscConfig+0x474>)
 8001624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800162a:	f7ff fb29 	bl	8000c80 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001632:	f7ff fb25 	bl	8000c80 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e10c      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001644:	4b6a      	ldr	r3, [pc, #424]	; (80017f0 <HAL_RCC_OscConfig+0x474>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d106      	bne.n	8001666 <HAL_RCC_OscConfig+0x2ea>
 8001658:	4b64      	ldr	r3, [pc, #400]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 800165a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165c:	4a63      	ldr	r2, [pc, #396]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6713      	str	r3, [r2, #112]	; 0x70
 8001664:	e01c      	b.n	80016a0 <HAL_RCC_OscConfig+0x324>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b05      	cmp	r3, #5
 800166c:	d10c      	bne.n	8001688 <HAL_RCC_OscConfig+0x30c>
 800166e:	4b5f      	ldr	r3, [pc, #380]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 8001670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001672:	4a5e      	ldr	r2, [pc, #376]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	6713      	str	r3, [r2, #112]	; 0x70
 800167a:	4b5c      	ldr	r3, [pc, #368]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 800167c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167e:	4a5b      	ldr	r2, [pc, #364]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6713      	str	r3, [r2, #112]	; 0x70
 8001686:	e00b      	b.n	80016a0 <HAL_RCC_OscConfig+0x324>
 8001688:	4b58      	ldr	r3, [pc, #352]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 800168a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168c:	4a57      	ldr	r2, [pc, #348]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 800168e:	f023 0301 	bic.w	r3, r3, #1
 8001692:	6713      	str	r3, [r2, #112]	; 0x70
 8001694:	4b55      	ldr	r3, [pc, #340]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 8001696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001698:	4a54      	ldr	r2, [pc, #336]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 800169a:	f023 0304 	bic.w	r3, r3, #4
 800169e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d015      	beq.n	80016d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a8:	f7ff faea 	bl	8000c80 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ae:	e00a      	b.n	80016c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b0:	f7ff fae6 	bl	8000c80 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80016be:	4293      	cmp	r3, r2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e0cb      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c6:	4b49      	ldr	r3, [pc, #292]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 80016c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0ee      	beq.n	80016b0 <HAL_RCC_OscConfig+0x334>
 80016d2:	e014      	b.n	80016fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d4:	f7ff fad4 	bl	8000c80 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016da:	e00a      	b.n	80016f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016dc:	f7ff fad0 	bl	8000c80 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e0b5      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f2:	4b3e      	ldr	r3, [pc, #248]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 80016f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1ee      	bne.n	80016dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016fe:	7dfb      	ldrb	r3, [r7, #23]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d105      	bne.n	8001710 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001704:	4b39      	ldr	r3, [pc, #228]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	4a38      	ldr	r2, [pc, #224]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 800170a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800170e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 80a1 	beq.w	800185c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800171a:	4b34      	ldr	r3, [pc, #208]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	2b08      	cmp	r3, #8
 8001724:	d05c      	beq.n	80017e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d141      	bne.n	80017b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172e:	4b31      	ldr	r3, [pc, #196]	; (80017f4 <HAL_RCC_OscConfig+0x478>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001734:	f7ff faa4 	bl	8000c80 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800173c:	f7ff faa0 	bl	8000c80 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e087      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174e:	4b27      	ldr	r3, [pc, #156]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69da      	ldr	r2, [r3, #28]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	019b      	lsls	r3, r3, #6
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001770:	085b      	lsrs	r3, r3, #1
 8001772:	3b01      	subs	r3, #1
 8001774:	041b      	lsls	r3, r3, #16
 8001776:	431a      	orrs	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177c:	061b      	lsls	r3, r3, #24
 800177e:	491b      	ldr	r1, [pc, #108]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 8001780:	4313      	orrs	r3, r2
 8001782:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001784:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <HAL_RCC_OscConfig+0x478>)
 8001786:	2201      	movs	r2, #1
 8001788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178a:	f7ff fa79 	bl	8000c80 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001792:	f7ff fa75 	bl	8000c80 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e05c      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0f0      	beq.n	8001792 <HAL_RCC_OscConfig+0x416>
 80017b0:	e054      	b.n	800185c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <HAL_RCC_OscConfig+0x478>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b8:	f7ff fa62 	bl	8000c80 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c0:	f7ff fa5e 	bl	8000c80 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e045      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_RCC_OscConfig+0x470>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0x444>
 80017de:	e03d      	b.n	800185c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d107      	bne.n	80017f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e038      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40007000 	.word	0x40007000
 80017f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017f8:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <HAL_RCC_OscConfig+0x4ec>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d028      	beq.n	8001858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001810:	429a      	cmp	r2, r3
 8001812:	d121      	bne.n	8001858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181e:	429a      	cmp	r2, r3
 8001820:	d11a      	bne.n	8001858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001828:	4013      	ands	r3, r2
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800182e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001830:	4293      	cmp	r3, r2
 8001832:	d111      	bne.n	8001858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183e:	085b      	lsrs	r3, r3, #1
 8001840:	3b01      	subs	r3, #1
 8001842:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001844:	429a      	cmp	r2, r3
 8001846:	d107      	bne.n	8001858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001852:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001854:	429a      	cmp	r2, r3
 8001856:	d001      	beq.n	800185c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800

0800186c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e0cc      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001880:	4b68      	ldr	r3, [pc, #416]	; (8001a24 <HAL_RCC_ClockConfig+0x1b8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d90c      	bls.n	80018a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188e:	4b65      	ldr	r3, [pc, #404]	; (8001a24 <HAL_RCC_ClockConfig+0x1b8>)
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001896:	4b63      	ldr	r3, [pc, #396]	; (8001a24 <HAL_RCC_ClockConfig+0x1b8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0b8      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d020      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c0:	4b59      	ldr	r3, [pc, #356]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	4a58      	ldr	r2, [pc, #352]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d005      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018d8:	4b53      	ldr	r3, [pc, #332]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	4a52      	ldr	r2, [pc, #328]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e4:	4b50      	ldr	r3, [pc, #320]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	494d      	ldr	r1, [pc, #308]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d044      	beq.n	800198c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d107      	bne.n	800191a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190a:	4b47      	ldr	r3, [pc, #284]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d119      	bne.n	800194a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e07f      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d003      	beq.n	800192a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001926:	2b03      	cmp	r3, #3
 8001928:	d107      	bne.n	800193a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192a:	4b3f      	ldr	r3, [pc, #252]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d109      	bne.n	800194a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e06f      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193a:	4b3b      	ldr	r3, [pc, #236]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e067      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800194a:	4b37      	ldr	r3, [pc, #220]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f023 0203 	bic.w	r2, r3, #3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	4934      	ldr	r1, [pc, #208]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	4313      	orrs	r3, r2
 800195a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800195c:	f7ff f990 	bl	8000c80 <HAL_GetTick>
 8001960:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001962:	e00a      	b.n	800197a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001964:	f7ff f98c 	bl	8000c80 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001972:	4293      	cmp	r3, r2
 8001974:	d901      	bls.n	800197a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e04f      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197a:	4b2b      	ldr	r3, [pc, #172]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 020c 	and.w	r2, r3, #12
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	429a      	cmp	r2, r3
 800198a:	d1eb      	bne.n	8001964 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800198c:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <HAL_RCC_ClockConfig+0x1b8>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d20c      	bcs.n	80019b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199a:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <HAL_RCC_ClockConfig+0x1b8>)
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a2:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <HAL_RCC_ClockConfig+0x1b8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e032      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d008      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c0:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	4916      	ldr	r1, [pc, #88]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0308 	and.w	r3, r3, #8
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d009      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019de:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	490e      	ldr	r1, [pc, #56]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019f2:	f000 f821 	bl	8001a38 <HAL_RCC_GetSysClockFreq>
 80019f6:	4602      	mov	r2, r0
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	091b      	lsrs	r3, r3, #4
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	490a      	ldr	r1, [pc, #40]	; (8001a2c <HAL_RCC_ClockConfig+0x1c0>)
 8001a04:	5ccb      	ldrb	r3, [r1, r3]
 8001a06:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0a:	4a09      	ldr	r2, [pc, #36]	; (8001a30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_RCC_ClockConfig+0x1c8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff f8f0 	bl	8000bf8 <HAL_InitTick>

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40023c00 	.word	0x40023c00
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	080040ec 	.word	0x080040ec
 8001a30:	20000000 	.word	0x20000000
 8001a34:	20000004 	.word	0x20000004

08001a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a3c:	b090      	sub	sp, #64	; 0x40
 8001a3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	637b      	str	r3, [r7, #52]	; 0x34
 8001a44:	2300      	movs	r3, #0
 8001a46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a48:	2300      	movs	r3, #0
 8001a4a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a50:	4b59      	ldr	r3, [pc, #356]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 030c 	and.w	r3, r3, #12
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	d00d      	beq.n	8001a78 <HAL_RCC_GetSysClockFreq+0x40>
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	f200 80a1 	bhi.w	8001ba4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <HAL_RCC_GetSysClockFreq+0x34>
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d003      	beq.n	8001a72 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a6a:	e09b      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a6c:	4b53      	ldr	r3, [pc, #332]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x184>)
 8001a6e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001a70:	e09b      	b.n	8001baa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a72:	4b53      	ldr	r3, [pc, #332]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a76:	e098      	b.n	8001baa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a78:	4b4f      	ldr	r3, [pc, #316]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a80:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a82:	4b4d      	ldr	r3, [pc, #308]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d028      	beq.n	8001ae0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a8e:	4b4a      	ldr	r3, [pc, #296]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	099b      	lsrs	r3, r3, #6
 8001a94:	2200      	movs	r2, #0
 8001a96:	623b      	str	r3, [r7, #32]
 8001a98:	627a      	str	r2, [r7, #36]	; 0x24
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4b47      	ldr	r3, [pc, #284]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001aa4:	fb03 f201 	mul.w	r2, r3, r1
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	fb00 f303 	mul.w	r3, r0, r3
 8001aae:	4413      	add	r3, r2
 8001ab0:	4a43      	ldr	r2, [pc, #268]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ab2:	fba0 1202 	umull	r1, r2, r0, r2
 8001ab6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ab8:	460a      	mov	r2, r1
 8001aba:	62ba      	str	r2, [r7, #40]	; 0x28
 8001abc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001abe:	4413      	add	r3, r2
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	61bb      	str	r3, [r7, #24]
 8001ac8:	61fa      	str	r2, [r7, #28]
 8001aca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ace:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ad2:	f7fe fbdd 	bl	8000290 <__aeabi_uldivmod>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4613      	mov	r3, r2
 8001adc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ade:	e053      	b.n	8001b88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ae0:	4b35      	ldr	r3, [pc, #212]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	099b      	lsrs	r3, r3, #6
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	617a      	str	r2, [r7, #20]
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001af2:	f04f 0b00 	mov.w	fp, #0
 8001af6:	4652      	mov	r2, sl
 8001af8:	465b      	mov	r3, fp
 8001afa:	f04f 0000 	mov.w	r0, #0
 8001afe:	f04f 0100 	mov.w	r1, #0
 8001b02:	0159      	lsls	r1, r3, #5
 8001b04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b08:	0150      	lsls	r0, r2, #5
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	ebb2 080a 	subs.w	r8, r2, sl
 8001b12:	eb63 090b 	sbc.w	r9, r3, fp
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b2a:	ebb2 0408 	subs.w	r4, r2, r8
 8001b2e:	eb63 0509 	sbc.w	r5, r3, r9
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	00eb      	lsls	r3, r5, #3
 8001b3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b40:	00e2      	lsls	r2, r4, #3
 8001b42:	4614      	mov	r4, r2
 8001b44:	461d      	mov	r5, r3
 8001b46:	eb14 030a 	adds.w	r3, r4, sl
 8001b4a:	603b      	str	r3, [r7, #0]
 8001b4c:	eb45 030b 	adc.w	r3, r5, fp
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b5e:	4629      	mov	r1, r5
 8001b60:	028b      	lsls	r3, r1, #10
 8001b62:	4621      	mov	r1, r4
 8001b64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b68:	4621      	mov	r1, r4
 8001b6a:	028a      	lsls	r2, r1, #10
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b72:	2200      	movs	r2, #0
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	60fa      	str	r2, [r7, #12]
 8001b78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b7c:	f7fe fb88 	bl	8000290 <__aeabi_uldivmod>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4613      	mov	r3, r2
 8001b86:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	0c1b      	lsrs	r3, r3, #16
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	3301      	adds	r3, #1
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001b98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ba2:	e002      	b.n	8001baa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x184>)
 8001ba6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ba8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3740      	adds	r7, #64	; 0x40
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	00f42400 	.word	0x00f42400
 8001bc0:	017d7840 	.word	0x017d7840

08001bc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bca:	681b      	ldr	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000000 	.word	0x20000000

08001bdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001be0:	f7ff fff0 	bl	8001bc4 <HAL_RCC_GetHCLKFreq>
 8001be4:	4602      	mov	r2, r0
 8001be6:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	0a9b      	lsrs	r3, r3, #10
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	4903      	ldr	r1, [pc, #12]	; (8001c00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bf2:	5ccb      	ldrb	r3, [r1, r3]
 8001bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	080040fc 	.word	0x080040fc

08001c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c08:	f7ff ffdc 	bl	8001bc4 <HAL_RCC_GetHCLKFreq>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	0b5b      	lsrs	r3, r3, #13
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	4903      	ldr	r1, [pc, #12]	; (8001c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c1a:	5ccb      	ldrb	r3, [r1, r3]
 8001c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40023800 	.word	0x40023800
 8001c28:	080040fc 	.word	0x080040fc

08001c2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e041      	b.n	8001cc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d106      	bne.n	8001c58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7fe fe80 	bl	8000958 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3304      	adds	r3, #4
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	f000 fab6 	bl	80021dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d001      	beq.n	8001ce4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e044      	b.n	8001d6e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a1e      	ldr	r2, [pc, #120]	; (8001d7c <HAL_TIM_Base_Start_IT+0xb0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d018      	beq.n	8001d38 <HAL_TIM_Base_Start_IT+0x6c>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d0e:	d013      	beq.n	8001d38 <HAL_TIM_Base_Start_IT+0x6c>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a1a      	ldr	r2, [pc, #104]	; (8001d80 <HAL_TIM_Base_Start_IT+0xb4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00e      	beq.n	8001d38 <HAL_TIM_Base_Start_IT+0x6c>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a19      	ldr	r2, [pc, #100]	; (8001d84 <HAL_TIM_Base_Start_IT+0xb8>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d009      	beq.n	8001d38 <HAL_TIM_Base_Start_IT+0x6c>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a17      	ldr	r2, [pc, #92]	; (8001d88 <HAL_TIM_Base_Start_IT+0xbc>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d004      	beq.n	8001d38 <HAL_TIM_Base_Start_IT+0x6c>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a16      	ldr	r2, [pc, #88]	; (8001d8c <HAL_TIM_Base_Start_IT+0xc0>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d111      	bne.n	8001d5c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2b06      	cmp	r3, #6
 8001d48:	d010      	beq.n	8001d6c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 0201 	orr.w	r2, r2, #1
 8001d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d5a:	e007      	b.n	8001d6c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0201 	orr.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40010000 	.word	0x40010000
 8001d80:	40000400 	.word	0x40000400
 8001d84:	40000800 	.word	0x40000800
 8001d88:	40000c00 	.word	0x40000c00
 8001d8c:	40014000 	.word	0x40014000

08001d90 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0201 	bic.w	r2, r2, #1
 8001da6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6a1a      	ldr	r2, [r3, #32]
 8001dae:	f241 1311 	movw	r3, #4369	; 0x1111
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10f      	bne.n	8001dd8 <HAL_TIM_Base_Stop_IT+0x48>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6a1a      	ldr	r2, [r3, #32]
 8001dbe:	f240 4344 	movw	r3, #1092	; 0x444
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d107      	bne.n	8001dd8 <HAL_TIM_Base_Stop_IT+0x48>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0201 	bic.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d122      	bne.n	8001e4a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d11b      	bne.n	8001e4a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f06f 0202 	mvn.w	r2, #2
 8001e1a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f9b5 	bl	80021a0 <HAL_TIM_IC_CaptureCallback>
 8001e36:	e005      	b.n	8001e44 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f9a7 	bl	800218c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f9b8 	bl	80021b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d122      	bne.n	8001e9e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d11b      	bne.n	8001e9e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f06f 0204 	mvn.w	r2, #4
 8001e6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2202      	movs	r2, #2
 8001e74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f98b 	bl	80021a0 <HAL_TIM_IC_CaptureCallback>
 8001e8a:	e005      	b.n	8001e98 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f97d 	bl	800218c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f98e 	bl	80021b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d122      	bne.n	8001ef2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d11b      	bne.n	8001ef2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f06f 0208 	mvn.w	r2, #8
 8001ec2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2204      	movs	r2, #4
 8001ec8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f961 	bl	80021a0 <HAL_TIM_IC_CaptureCallback>
 8001ede:	e005      	b.n	8001eec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f953 	bl	800218c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f964 	bl	80021b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	f003 0310 	and.w	r3, r3, #16
 8001efc:	2b10      	cmp	r3, #16
 8001efe:	d122      	bne.n	8001f46 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f003 0310 	and.w	r3, r3, #16
 8001f0a:	2b10      	cmp	r3, #16
 8001f0c:	d11b      	bne.n	8001f46 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f06f 0210 	mvn.w	r2, #16
 8001f16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2208      	movs	r2, #8
 8001f1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f937 	bl	80021a0 <HAL_TIM_IC_CaptureCallback>
 8001f32:	e005      	b.n	8001f40 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f929 	bl	800218c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f93a 	bl	80021b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d10e      	bne.n	8001f72 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d107      	bne.n	8001f72 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f06f 0201 	mvn.w	r2, #1
 8001f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7fe fb1f 	bl	80005b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7c:	2b80      	cmp	r3, #128	; 0x80
 8001f7e:	d10e      	bne.n	8001f9e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8a:	2b80      	cmp	r3, #128	; 0x80
 8001f8c:	d107      	bne.n	8001f9e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 fab1 	bl	8002500 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa8:	2b40      	cmp	r3, #64	; 0x40
 8001faa:	d10e      	bne.n	8001fca <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb6:	2b40      	cmp	r3, #64	; 0x40
 8001fb8:	d107      	bne.n	8001fca <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f8ff 	bl	80021c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	f003 0320 	and.w	r3, r3, #32
 8001fd4:	2b20      	cmp	r3, #32
 8001fd6:	d10e      	bne.n	8001ff6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f003 0320 	and.w	r3, r3, #32
 8001fe2:	2b20      	cmp	r3, #32
 8001fe4:	d107      	bne.n	8001ff6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f06f 0220 	mvn.w	r2, #32
 8001fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 fa7b 	bl	80024ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b084      	sub	sp, #16
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_TIM_ConfigClockSource+0x1c>
 8002016:	2302      	movs	r3, #2
 8002018:	e0b4      	b.n	8002184 <HAL_TIM_ConfigClockSource+0x186>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2202      	movs	r2, #2
 8002026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002038:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002040:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002052:	d03e      	beq.n	80020d2 <HAL_TIM_ConfigClockSource+0xd4>
 8002054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002058:	f200 8087 	bhi.w	800216a <HAL_TIM_ConfigClockSource+0x16c>
 800205c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002060:	f000 8086 	beq.w	8002170 <HAL_TIM_ConfigClockSource+0x172>
 8002064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002068:	d87f      	bhi.n	800216a <HAL_TIM_ConfigClockSource+0x16c>
 800206a:	2b70      	cmp	r3, #112	; 0x70
 800206c:	d01a      	beq.n	80020a4 <HAL_TIM_ConfigClockSource+0xa6>
 800206e:	2b70      	cmp	r3, #112	; 0x70
 8002070:	d87b      	bhi.n	800216a <HAL_TIM_ConfigClockSource+0x16c>
 8002072:	2b60      	cmp	r3, #96	; 0x60
 8002074:	d050      	beq.n	8002118 <HAL_TIM_ConfigClockSource+0x11a>
 8002076:	2b60      	cmp	r3, #96	; 0x60
 8002078:	d877      	bhi.n	800216a <HAL_TIM_ConfigClockSource+0x16c>
 800207a:	2b50      	cmp	r3, #80	; 0x50
 800207c:	d03c      	beq.n	80020f8 <HAL_TIM_ConfigClockSource+0xfa>
 800207e:	2b50      	cmp	r3, #80	; 0x50
 8002080:	d873      	bhi.n	800216a <HAL_TIM_ConfigClockSource+0x16c>
 8002082:	2b40      	cmp	r3, #64	; 0x40
 8002084:	d058      	beq.n	8002138 <HAL_TIM_ConfigClockSource+0x13a>
 8002086:	2b40      	cmp	r3, #64	; 0x40
 8002088:	d86f      	bhi.n	800216a <HAL_TIM_ConfigClockSource+0x16c>
 800208a:	2b30      	cmp	r3, #48	; 0x30
 800208c:	d064      	beq.n	8002158 <HAL_TIM_ConfigClockSource+0x15a>
 800208e:	2b30      	cmp	r3, #48	; 0x30
 8002090:	d86b      	bhi.n	800216a <HAL_TIM_ConfigClockSource+0x16c>
 8002092:	2b20      	cmp	r3, #32
 8002094:	d060      	beq.n	8002158 <HAL_TIM_ConfigClockSource+0x15a>
 8002096:	2b20      	cmp	r3, #32
 8002098:	d867      	bhi.n	800216a <HAL_TIM_ConfigClockSource+0x16c>
 800209a:	2b00      	cmp	r3, #0
 800209c:	d05c      	beq.n	8002158 <HAL_TIM_ConfigClockSource+0x15a>
 800209e:	2b10      	cmp	r3, #16
 80020a0:	d05a      	beq.n	8002158 <HAL_TIM_ConfigClockSource+0x15a>
 80020a2:	e062      	b.n	800216a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	6899      	ldr	r1, [r3, #8]
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f000 f98c 	bl	80023d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020c6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	609a      	str	r2, [r3, #8]
      break;
 80020d0:	e04f      	b.n	8002172 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	6899      	ldr	r1, [r3, #8]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f000 f975 	bl	80023d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020f4:	609a      	str	r2, [r3, #8]
      break;
 80020f6:	e03c      	b.n	8002172 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	6859      	ldr	r1, [r3, #4]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	461a      	mov	r2, r3
 8002106:	f000 f8e9 	bl	80022dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2150      	movs	r1, #80	; 0x50
 8002110:	4618      	mov	r0, r3
 8002112:	f000 f942 	bl	800239a <TIM_ITRx_SetConfig>
      break;
 8002116:	e02c      	b.n	8002172 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	6859      	ldr	r1, [r3, #4]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	461a      	mov	r2, r3
 8002126:	f000 f908 	bl	800233a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2160      	movs	r1, #96	; 0x60
 8002130:	4618      	mov	r0, r3
 8002132:	f000 f932 	bl	800239a <TIM_ITRx_SetConfig>
      break;
 8002136:	e01c      	b.n	8002172 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6818      	ldr	r0, [r3, #0]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	6859      	ldr	r1, [r3, #4]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	461a      	mov	r2, r3
 8002146:	f000 f8c9 	bl	80022dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2140      	movs	r1, #64	; 0x40
 8002150:	4618      	mov	r0, r3
 8002152:	f000 f922 	bl	800239a <TIM_ITRx_SetConfig>
      break;
 8002156:	e00c      	b.n	8002172 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4619      	mov	r1, r3
 8002162:	4610      	mov	r0, r2
 8002164:	f000 f919 	bl	800239a <TIM_ITRx_SetConfig>
      break;
 8002168:	e003      	b.n	8002172 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	73fb      	strb	r3, [r7, #15]
      break;
 800216e:	e000      	b.n	8002172 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002170:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002182:	7bfb      	ldrb	r3, [r7, #15]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a34      	ldr	r2, [pc, #208]	; (80022c0 <TIM_Base_SetConfig+0xe4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d00f      	beq.n	8002214 <TIM_Base_SetConfig+0x38>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021fa:	d00b      	beq.n	8002214 <TIM_Base_SetConfig+0x38>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a31      	ldr	r2, [pc, #196]	; (80022c4 <TIM_Base_SetConfig+0xe8>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d007      	beq.n	8002214 <TIM_Base_SetConfig+0x38>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a30      	ldr	r2, [pc, #192]	; (80022c8 <TIM_Base_SetConfig+0xec>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d003      	beq.n	8002214 <TIM_Base_SetConfig+0x38>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a2f      	ldr	r2, [pc, #188]	; (80022cc <TIM_Base_SetConfig+0xf0>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d108      	bne.n	8002226 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800221a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	4313      	orrs	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a25      	ldr	r2, [pc, #148]	; (80022c0 <TIM_Base_SetConfig+0xe4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d01b      	beq.n	8002266 <TIM_Base_SetConfig+0x8a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002234:	d017      	beq.n	8002266 <TIM_Base_SetConfig+0x8a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a22      	ldr	r2, [pc, #136]	; (80022c4 <TIM_Base_SetConfig+0xe8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d013      	beq.n	8002266 <TIM_Base_SetConfig+0x8a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a21      	ldr	r2, [pc, #132]	; (80022c8 <TIM_Base_SetConfig+0xec>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d00f      	beq.n	8002266 <TIM_Base_SetConfig+0x8a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a20      	ldr	r2, [pc, #128]	; (80022cc <TIM_Base_SetConfig+0xf0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d00b      	beq.n	8002266 <TIM_Base_SetConfig+0x8a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a1f      	ldr	r2, [pc, #124]	; (80022d0 <TIM_Base_SetConfig+0xf4>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d007      	beq.n	8002266 <TIM_Base_SetConfig+0x8a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a1e      	ldr	r2, [pc, #120]	; (80022d4 <TIM_Base_SetConfig+0xf8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d003      	beq.n	8002266 <TIM_Base_SetConfig+0x8a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a1d      	ldr	r2, [pc, #116]	; (80022d8 <TIM_Base_SetConfig+0xfc>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d108      	bne.n	8002278 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800226c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	4313      	orrs	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	4313      	orrs	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a08      	ldr	r2, [pc, #32]	; (80022c0 <TIM_Base_SetConfig+0xe4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d103      	bne.n	80022ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	615a      	str	r2, [r3, #20]
}
 80022b2:	bf00      	nop
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40010000 	.word	0x40010000
 80022c4:	40000400 	.word	0x40000400
 80022c8:	40000800 	.word	0x40000800
 80022cc:	40000c00 	.word	0x40000c00
 80022d0:	40014000 	.word	0x40014000
 80022d4:	40014400 	.word	0x40014400
 80022d8:	40014800 	.word	0x40014800

080022dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	f023 0201 	bic.w	r2, r3, #1
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002306:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f023 030a 	bic.w	r3, r3, #10
 8002318:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	4313      	orrs	r3, r2
 8002320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	621a      	str	r2, [r3, #32]
}
 800232e:	bf00      	nop
 8002330:	371c      	adds	r7, #28
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800233a:	b480      	push	{r7}
 800233c:	b087      	sub	sp, #28
 800233e:	af00      	add	r7, sp, #0
 8002340:	60f8      	str	r0, [r7, #12]
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	f023 0210 	bic.w	r2, r3, #16
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002364:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	031b      	lsls	r3, r3, #12
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	4313      	orrs	r3, r2
 800236e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002376:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	621a      	str	r2, [r3, #32]
}
 800238e:	bf00      	nop
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800239a:	b480      	push	{r7}
 800239c:	b085      	sub	sp, #20
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	f043 0307 	orr.w	r3, r3, #7
 80023bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	609a      	str	r2, [r3, #8]
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
 80023dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	021a      	lsls	r2, r3, #8
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	431a      	orrs	r2, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	609a      	str	r2, [r3, #8]
}
 8002404:	bf00      	nop
 8002406:	371c      	adds	r7, #28
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002424:	2302      	movs	r3, #2
 8002426:	e050      	b.n	80024ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800244e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	4313      	orrs	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a1c      	ldr	r2, [pc, #112]	; (80024d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d018      	beq.n	800249e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002474:	d013      	beq.n	800249e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a18      	ldr	r2, [pc, #96]	; (80024dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d00e      	beq.n	800249e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a16      	ldr	r2, [pc, #88]	; (80024e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d009      	beq.n	800249e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a15      	ldr	r2, [pc, #84]	; (80024e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d004      	beq.n	800249e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a13      	ldr	r2, [pc, #76]	; (80024e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d10c      	bne.n	80024b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40010000 	.word	0x40010000
 80024dc:	40000400 	.word	0x40000400
 80024e0:	40000800 	.word	0x40000800
 80024e4:	40000c00 	.word	0x40000c00
 80024e8:	40014000 	.word	0x40014000

080024ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e03f      	b.n	80025a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d106      	bne.n	8002540 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7fe fa32 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2224      	movs	r2, #36	; 0x24
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002556:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 fcbf 	bl	8002edc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800256c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	695a      	ldr	r2, [r3, #20]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800257c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800258c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2220      	movs	r2, #32
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b085      	sub	sp, #20
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	4613      	mov	r3, r2
 80025ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b20      	cmp	r3, #32
 80025c6:	d130      	bne.n	800262a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d002      	beq.n	80025d4 <HAL_UART_Transmit_IT+0x26>
 80025ce:	88fb      	ldrh	r3, [r7, #6]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e029      	b.n	800262c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_UART_Transmit_IT+0x38>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e022      	b.n	800262c <HAL_UART_Transmit_IT+0x7e>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	88fa      	ldrh	r2, [r7, #6]
 80025f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	88fa      	ldrh	r2, [r7, #6]
 80025fe:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2221      	movs	r2, #33	; 0x21
 800260a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002624:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	e000      	b.n	800262c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800262a:	2302      	movs	r3, #2
  }
}
 800262c:	4618      	mov	r0, r3
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b0ba      	sub	sp, #232	; 0xe8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800265e:	2300      	movs	r3, #0
 8002660:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002664:	2300      	movs	r3, #0
 8002666:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800266a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002676:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10f      	bne.n	800269e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800267e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002682:	f003 0320 	and.w	r3, r3, #32
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <HAL_UART_IRQHandler+0x66>
 800268a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800268e:	f003 0320 	and.w	r3, r3, #32
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 fb65 	bl	8002d66 <UART_Receive_IT>
      return;
 800269c:	e256      	b.n	8002b4c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800269e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 80de 	beq.w	8002864 <HAL_UART_IRQHandler+0x22c>
 80026a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d106      	bne.n	80026c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80d1 	beq.w	8002864 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00b      	beq.n	80026e6 <HAL_UART_IRQHandler+0xae>
 80026ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d005      	beq.n	80026e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f043 0201 	orr.w	r2, r3, #1
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00b      	beq.n	800270a <HAL_UART_IRQHandler+0xd2>
 80026f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d005      	beq.n	800270a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f043 0202 	orr.w	r2, r3, #2
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800270a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00b      	beq.n	800272e <HAL_UART_IRQHandler+0xf6>
 8002716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d005      	beq.n	800272e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f043 0204 	orr.w	r2, r3, #4
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800272e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d011      	beq.n	800275e <HAL_UART_IRQHandler+0x126>
 800273a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800273e:	f003 0320 	and.w	r3, r3, #32
 8002742:	2b00      	cmp	r3, #0
 8002744:	d105      	bne.n	8002752 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d005      	beq.n	800275e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f043 0208 	orr.w	r2, r3, #8
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 81ed 	beq.w	8002b42 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800276c:	f003 0320 	and.w	r3, r3, #32
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_UART_IRQHandler+0x14e>
 8002774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	2b00      	cmp	r3, #0
 800277e:	d002      	beq.n	8002786 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 faf0 	bl	8002d66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002790:	2b40      	cmp	r3, #64	; 0x40
 8002792:	bf0c      	ite	eq
 8002794:	2301      	moveq	r3, #1
 8002796:	2300      	movne	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d103      	bne.n	80027b2 <HAL_UART_IRQHandler+0x17a>
 80027aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d04f      	beq.n	8002852 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f9f8 	bl	8002ba8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c2:	2b40      	cmp	r3, #64	; 0x40
 80027c4:	d141      	bne.n	800284a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3314      	adds	r3, #20
 80027cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027d4:	e853 3f00 	ldrex	r3, [r3]
 80027d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80027dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	3314      	adds	r3, #20
 80027ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80027f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80027f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80027fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002802:	e841 2300 	strex	r3, r2, [r1]
 8002806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800280a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1d9      	bne.n	80027c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002816:	2b00      	cmp	r3, #0
 8002818:	d013      	beq.n	8002842 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281e:	4a7d      	ldr	r2, [pc, #500]	; (8002a14 <HAL_UART_IRQHandler+0x3dc>)
 8002820:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe fbb7 	bl	8000f9a <HAL_DMA_Abort_IT>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d016      	beq.n	8002860 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800283c:	4610      	mov	r0, r2
 800283e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002840:	e00e      	b.n	8002860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f99a 	bl	8002b7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002848:	e00a      	b.n	8002860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f996 	bl	8002b7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002850:	e006      	b.n	8002860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f992 	bl	8002b7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800285e:	e170      	b.n	8002b42 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002860:	bf00      	nop
    return;
 8002862:	e16e      	b.n	8002b42 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	2b01      	cmp	r3, #1
 800286a:	f040 814a 	bne.w	8002b02 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800286e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002872:	f003 0310 	and.w	r3, r3, #16
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 8143 	beq.w	8002b02 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800287c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002880:	f003 0310 	and.w	r3, r3, #16
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 813c 	beq.w	8002b02 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800288a:	2300      	movs	r3, #0
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028aa:	2b40      	cmp	r3, #64	; 0x40
 80028ac:	f040 80b4 	bne.w	8002a18 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80028bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 8140 	beq.w	8002b46 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80028ce:	429a      	cmp	r2, r3
 80028d0:	f080 8139 	bcs.w	8002b46 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80028da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028e6:	f000 8088 	beq.w	80029fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	330c      	adds	r3, #12
 80028f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028f8:	e853 3f00 	ldrex	r3, [r3]
 80028fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002900:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002908:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	330c      	adds	r3, #12
 8002912:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002916:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800291a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800291e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002922:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002926:	e841 2300 	strex	r3, r2, [r1]
 800292a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800292e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1d9      	bne.n	80028ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	3314      	adds	r3, #20
 800293c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002940:	e853 3f00 	ldrex	r3, [r3]
 8002944:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002946:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002948:	f023 0301 	bic.w	r3, r3, #1
 800294c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	3314      	adds	r3, #20
 8002956:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800295a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800295e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002960:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002962:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002966:	e841 2300 	strex	r3, r2, [r1]
 800296a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800296c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1e1      	bne.n	8002936 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	3314      	adds	r3, #20
 8002978:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800297a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800297c:	e853 3f00 	ldrex	r3, [r3]
 8002980:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002988:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	3314      	adds	r3, #20
 8002992:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002996:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002998:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800299c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800299e:	e841 2300 	strex	r3, r2, [r1]
 80029a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80029a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1e3      	bne.n	8002972 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2220      	movs	r2, #32
 80029ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	330c      	adds	r3, #12
 80029be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029c2:	e853 3f00 	ldrex	r3, [r3]
 80029c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80029c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029ca:	f023 0310 	bic.w	r3, r3, #16
 80029ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	330c      	adds	r3, #12
 80029d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80029dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80029de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029e4:	e841 2300 	strex	r3, r2, [r1]
 80029e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80029ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1e3      	bne.n	80029b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fe fa60 	bl	8000eba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	4619      	mov	r1, r3
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f8c0 	bl	8002b90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a10:	e099      	b.n	8002b46 <HAL_UART_IRQHandler+0x50e>
 8002a12:	bf00      	nop
 8002a14:	08002c6f 	.word	0x08002c6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 808b 	beq.w	8002b4a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002a34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 8086 	beq.w	8002b4a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	330c      	adds	r3, #12
 8002a44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a48:	e853 3f00 	ldrex	r3, [r3]
 8002a4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	330c      	adds	r3, #12
 8002a5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002a62:	647a      	str	r2, [r7, #68]	; 0x44
 8002a64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a6a:	e841 2300 	strex	r3, r2, [r1]
 8002a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1e3      	bne.n	8002a3e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	3314      	adds	r3, #20
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	e853 3f00 	ldrex	r3, [r3]
 8002a84:	623b      	str	r3, [r7, #32]
   return(result);
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	f023 0301 	bic.w	r3, r3, #1
 8002a8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	3314      	adds	r3, #20
 8002a96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002a9a:	633a      	str	r2, [r7, #48]	; 0x30
 8002a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aa2:	e841 2300 	strex	r3, r2, [r1]
 8002aa6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1e3      	bne.n	8002a76 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	330c      	adds	r3, #12
 8002ac2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	e853 3f00 	ldrex	r3, [r3]
 8002aca:	60fb      	str	r3, [r7, #12]
   return(result);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f023 0310 	bic.w	r3, r3, #16
 8002ad2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	330c      	adds	r3, #12
 8002adc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002ae0:	61fa      	str	r2, [r7, #28]
 8002ae2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae4:	69b9      	ldr	r1, [r7, #24]
 8002ae6:	69fa      	ldr	r2, [r7, #28]
 8002ae8:	e841 2300 	strex	r3, r2, [r1]
 8002aec:	617b      	str	r3, [r7, #20]
   return(result);
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1e3      	bne.n	8002abc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002af4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002af8:	4619      	mov	r1, r3
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f848 	bl	8002b90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b00:	e023      	b.n	8002b4a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d009      	beq.n	8002b22 <HAL_UART_IRQHandler+0x4ea>
 8002b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f8bb 	bl	8002c96 <UART_Transmit_IT>
    return;
 8002b20:	e014      	b.n	8002b4c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00e      	beq.n	8002b4c <HAL_UART_IRQHandler+0x514>
 8002b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d008      	beq.n	8002b4c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f8fb 	bl	8002d36 <UART_EndTransmit_IT>
    return;
 8002b40:	e004      	b.n	8002b4c <HAL_UART_IRQHandler+0x514>
    return;
 8002b42:	bf00      	nop
 8002b44:	e002      	b.n	8002b4c <HAL_UART_IRQHandler+0x514>
      return;
 8002b46:	bf00      	nop
 8002b48:	e000      	b.n	8002b4c <HAL_UART_IRQHandler+0x514>
      return;
 8002b4a:	bf00      	nop
  }
}
 8002b4c:	37e8      	adds	r7, #232	; 0xe8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop

08002b54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b095      	sub	sp, #84	; 0x54
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	330c      	adds	r3, #12
 8002bb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bba:	e853 3f00 	ldrex	r3, [r3]
 8002bbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	330c      	adds	r3, #12
 8002bce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bd0:	643a      	str	r2, [r7, #64]	; 0x40
 8002bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002bd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bd8:	e841 2300 	strex	r3, r2, [r1]
 8002bdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1e5      	bne.n	8002bb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	3314      	adds	r3, #20
 8002bea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	e853 3f00 	ldrex	r3, [r3]
 8002bf2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f023 0301 	bic.w	r3, r3, #1
 8002bfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	3314      	adds	r3, #20
 8002c02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c0c:	e841 2300 	strex	r3, r2, [r1]
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1e5      	bne.n	8002be4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d119      	bne.n	8002c54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	330c      	adds	r3, #12
 8002c26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	e853 3f00 	ldrex	r3, [r3]
 8002c2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f023 0310 	bic.w	r3, r3, #16
 8002c36:	647b      	str	r3, [r7, #68]	; 0x44
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	330c      	adds	r3, #12
 8002c3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c40:	61ba      	str	r2, [r7, #24]
 8002c42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c44:	6979      	ldr	r1, [r7, #20]
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	e841 2300 	strex	r3, r2, [r1]
 8002c4c:	613b      	str	r3, [r7, #16]
   return(result);
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1e5      	bne.n	8002c20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c62:	bf00      	nop
 8002c64:	3754      	adds	r7, #84	; 0x54
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b084      	sub	sp, #16
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f7ff ff77 	bl	8002b7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b085      	sub	sp, #20
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b21      	cmp	r3, #33	; 0x21
 8002ca8:	d13e      	bne.n	8002d28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb2:	d114      	bne.n	8002cde <UART_Transmit_IT+0x48>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d110      	bne.n	8002cde <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cd0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	1c9a      	adds	r2, r3, #2
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	621a      	str	r2, [r3, #32]
 8002cdc:	e008      	b.n	8002cf0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	1c59      	adds	r1, r3, #1
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6211      	str	r1, [r2, #32]
 8002ce8:	781a      	ldrb	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10f      	bne.n	8002d24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	e000      	b.n	8002d2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d28:	2302      	movs	r3, #2
  }
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff fefc 	bl	8002b54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b08c      	sub	sp, #48	; 0x30
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b22      	cmp	r3, #34	; 0x22
 8002d78:	f040 80ab 	bne.w	8002ed2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d84:	d117      	bne.n	8002db6 <UART_Receive_IT+0x50>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d113      	bne.n	8002db6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d96:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dae:	1c9a      	adds	r2, r3, #2
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	629a      	str	r2, [r3, #40]	; 0x28
 8002db4:	e026      	b.n	8002e04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc8:	d007      	beq.n	8002dda <UART_Receive_IT+0x74>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10a      	bne.n	8002de8 <UART_Receive_IT+0x82>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d106      	bne.n	8002de8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de4:	701a      	strb	r2, [r3, #0]
 8002de6:	e008      	b.n	8002dfa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfe:	1c5a      	adds	r2, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	4619      	mov	r1, r3
 8002e12:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d15a      	bne.n	8002ece <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0220 	bic.w	r2, r2, #32
 8002e26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0201 	bic.w	r2, r2, #1
 8002e46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d135      	bne.n	8002ec4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	330c      	adds	r3, #12
 8002e64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	e853 3f00 	ldrex	r3, [r3]
 8002e6c:	613b      	str	r3, [r7, #16]
   return(result);
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	f023 0310 	bic.w	r3, r3, #16
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	330c      	adds	r3, #12
 8002e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7e:	623a      	str	r2, [r7, #32]
 8002e80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e82:	69f9      	ldr	r1, [r7, #28]
 8002e84:	6a3a      	ldr	r2, [r7, #32]
 8002e86:	e841 2300 	strex	r3, r2, [r1]
 8002e8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1e5      	bne.n	8002e5e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	2b10      	cmp	r3, #16
 8002e9e:	d10a      	bne.n	8002eb6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002eba:	4619      	mov	r1, r3
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff fe67 	bl	8002b90 <HAL_UARTEx_RxEventCallback>
 8002ec2:	e002      	b.n	8002eca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff fe4f 	bl	8002b68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e002      	b.n	8002ed4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	e000      	b.n	8002ed4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002ed2:	2302      	movs	r3, #2
  }
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3730      	adds	r7, #48	; 0x30
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ee0:	b0c0      	sub	sp, #256	; 0x100
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef8:	68d9      	ldr	r1, [r3, #12]
 8002efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	ea40 0301 	orr.w	r3, r0, r1
 8002f04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f34:	f021 010c 	bic.w	r1, r1, #12
 8002f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f42:	430b      	orrs	r3, r1
 8002f44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f56:	6999      	ldr	r1, [r3, #24]
 8002f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	ea40 0301 	orr.w	r3, r0, r1
 8002f62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	4b8f      	ldr	r3, [pc, #572]	; (80031a8 <UART_SetConfig+0x2cc>)
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d005      	beq.n	8002f7c <UART_SetConfig+0xa0>
 8002f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	4b8d      	ldr	r3, [pc, #564]	; (80031ac <UART_SetConfig+0x2d0>)
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d104      	bne.n	8002f86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f7c:	f7fe fe42 	bl	8001c04 <HAL_RCC_GetPCLK2Freq>
 8002f80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f84:	e003      	b.n	8002f8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f86:	f7fe fe29 	bl	8001bdc <HAL_RCC_GetPCLK1Freq>
 8002f8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f98:	f040 810c 	bne.w	80031b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002fa6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002faa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002fae:	4622      	mov	r2, r4
 8002fb0:	462b      	mov	r3, r5
 8002fb2:	1891      	adds	r1, r2, r2
 8002fb4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002fb6:	415b      	adcs	r3, r3
 8002fb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fbe:	4621      	mov	r1, r4
 8002fc0:	eb12 0801 	adds.w	r8, r2, r1
 8002fc4:	4629      	mov	r1, r5
 8002fc6:	eb43 0901 	adc.w	r9, r3, r1
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fde:	4690      	mov	r8, r2
 8002fe0:	4699      	mov	r9, r3
 8002fe2:	4623      	mov	r3, r4
 8002fe4:	eb18 0303 	adds.w	r3, r8, r3
 8002fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002fec:	462b      	mov	r3, r5
 8002fee:	eb49 0303 	adc.w	r3, r9, r3
 8002ff2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003002:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003006:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800300a:	460b      	mov	r3, r1
 800300c:	18db      	adds	r3, r3, r3
 800300e:	653b      	str	r3, [r7, #80]	; 0x50
 8003010:	4613      	mov	r3, r2
 8003012:	eb42 0303 	adc.w	r3, r2, r3
 8003016:	657b      	str	r3, [r7, #84]	; 0x54
 8003018:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800301c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003020:	f7fd f936 	bl	8000290 <__aeabi_uldivmod>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4b61      	ldr	r3, [pc, #388]	; (80031b0 <UART_SetConfig+0x2d4>)
 800302a:	fba3 2302 	umull	r2, r3, r3, r2
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	011c      	lsls	r4, r3, #4
 8003032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003036:	2200      	movs	r2, #0
 8003038:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800303c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003040:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003044:	4642      	mov	r2, r8
 8003046:	464b      	mov	r3, r9
 8003048:	1891      	adds	r1, r2, r2
 800304a:	64b9      	str	r1, [r7, #72]	; 0x48
 800304c:	415b      	adcs	r3, r3
 800304e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003050:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003054:	4641      	mov	r1, r8
 8003056:	eb12 0a01 	adds.w	sl, r2, r1
 800305a:	4649      	mov	r1, r9
 800305c:	eb43 0b01 	adc.w	fp, r3, r1
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800306c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003070:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003074:	4692      	mov	sl, r2
 8003076:	469b      	mov	fp, r3
 8003078:	4643      	mov	r3, r8
 800307a:	eb1a 0303 	adds.w	r3, sl, r3
 800307e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003082:	464b      	mov	r3, r9
 8003084:	eb4b 0303 	adc.w	r3, fp, r3
 8003088:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800308c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003098:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800309c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80030a0:	460b      	mov	r3, r1
 80030a2:	18db      	adds	r3, r3, r3
 80030a4:	643b      	str	r3, [r7, #64]	; 0x40
 80030a6:	4613      	mov	r3, r2
 80030a8:	eb42 0303 	adc.w	r3, r2, r3
 80030ac:	647b      	str	r3, [r7, #68]	; 0x44
 80030ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80030b6:	f7fd f8eb 	bl	8000290 <__aeabi_uldivmod>
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	4611      	mov	r1, r2
 80030c0:	4b3b      	ldr	r3, [pc, #236]	; (80031b0 <UART_SetConfig+0x2d4>)
 80030c2:	fba3 2301 	umull	r2, r3, r3, r1
 80030c6:	095b      	lsrs	r3, r3, #5
 80030c8:	2264      	movs	r2, #100	; 0x64
 80030ca:	fb02 f303 	mul.w	r3, r2, r3
 80030ce:	1acb      	subs	r3, r1, r3
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030d6:	4b36      	ldr	r3, [pc, #216]	; (80031b0 <UART_SetConfig+0x2d4>)
 80030d8:	fba3 2302 	umull	r2, r3, r3, r2
 80030dc:	095b      	lsrs	r3, r3, #5
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030e4:	441c      	add	r4, r3
 80030e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030ea:	2200      	movs	r2, #0
 80030ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80030f8:	4642      	mov	r2, r8
 80030fa:	464b      	mov	r3, r9
 80030fc:	1891      	adds	r1, r2, r2
 80030fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003100:	415b      	adcs	r3, r3
 8003102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003104:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003108:	4641      	mov	r1, r8
 800310a:	1851      	adds	r1, r2, r1
 800310c:	6339      	str	r1, [r7, #48]	; 0x30
 800310e:	4649      	mov	r1, r9
 8003110:	414b      	adcs	r3, r1
 8003112:	637b      	str	r3, [r7, #52]	; 0x34
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003120:	4659      	mov	r1, fp
 8003122:	00cb      	lsls	r3, r1, #3
 8003124:	4651      	mov	r1, sl
 8003126:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800312a:	4651      	mov	r1, sl
 800312c:	00ca      	lsls	r2, r1, #3
 800312e:	4610      	mov	r0, r2
 8003130:	4619      	mov	r1, r3
 8003132:	4603      	mov	r3, r0
 8003134:	4642      	mov	r2, r8
 8003136:	189b      	adds	r3, r3, r2
 8003138:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800313c:	464b      	mov	r3, r9
 800313e:	460a      	mov	r2, r1
 8003140:	eb42 0303 	adc.w	r3, r2, r3
 8003144:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003154:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003158:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800315c:	460b      	mov	r3, r1
 800315e:	18db      	adds	r3, r3, r3
 8003160:	62bb      	str	r3, [r7, #40]	; 0x28
 8003162:	4613      	mov	r3, r2
 8003164:	eb42 0303 	adc.w	r3, r2, r3
 8003168:	62fb      	str	r3, [r7, #44]	; 0x2c
 800316a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800316e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003172:	f7fd f88d 	bl	8000290 <__aeabi_uldivmod>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4b0d      	ldr	r3, [pc, #52]	; (80031b0 <UART_SetConfig+0x2d4>)
 800317c:	fba3 1302 	umull	r1, r3, r3, r2
 8003180:	095b      	lsrs	r3, r3, #5
 8003182:	2164      	movs	r1, #100	; 0x64
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	3332      	adds	r3, #50	; 0x32
 800318e:	4a08      	ldr	r2, [pc, #32]	; (80031b0 <UART_SetConfig+0x2d4>)
 8003190:	fba2 2303 	umull	r2, r3, r2, r3
 8003194:	095b      	lsrs	r3, r3, #5
 8003196:	f003 0207 	and.w	r2, r3, #7
 800319a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4422      	add	r2, r4
 80031a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031a4:	e105      	b.n	80033b2 <UART_SetConfig+0x4d6>
 80031a6:	bf00      	nop
 80031a8:	40011000 	.word	0x40011000
 80031ac:	40011400 	.word	0x40011400
 80031b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031b8:	2200      	movs	r2, #0
 80031ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80031c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80031c6:	4642      	mov	r2, r8
 80031c8:	464b      	mov	r3, r9
 80031ca:	1891      	adds	r1, r2, r2
 80031cc:	6239      	str	r1, [r7, #32]
 80031ce:	415b      	adcs	r3, r3
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
 80031d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031d6:	4641      	mov	r1, r8
 80031d8:	1854      	adds	r4, r2, r1
 80031da:	4649      	mov	r1, r9
 80031dc:	eb43 0501 	adc.w	r5, r3, r1
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	00eb      	lsls	r3, r5, #3
 80031ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031ee:	00e2      	lsls	r2, r4, #3
 80031f0:	4614      	mov	r4, r2
 80031f2:	461d      	mov	r5, r3
 80031f4:	4643      	mov	r3, r8
 80031f6:	18e3      	adds	r3, r4, r3
 80031f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031fc:	464b      	mov	r3, r9
 80031fe:	eb45 0303 	adc.w	r3, r5, r3
 8003202:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003212:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	f04f 0300 	mov.w	r3, #0
 800321e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003222:	4629      	mov	r1, r5
 8003224:	008b      	lsls	r3, r1, #2
 8003226:	4621      	mov	r1, r4
 8003228:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800322c:	4621      	mov	r1, r4
 800322e:	008a      	lsls	r2, r1, #2
 8003230:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003234:	f7fd f82c 	bl	8000290 <__aeabi_uldivmod>
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	4b60      	ldr	r3, [pc, #384]	; (80033c0 <UART_SetConfig+0x4e4>)
 800323e:	fba3 2302 	umull	r2, r3, r3, r2
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	011c      	lsls	r4, r3, #4
 8003246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800324a:	2200      	movs	r2, #0
 800324c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003250:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003254:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003258:	4642      	mov	r2, r8
 800325a:	464b      	mov	r3, r9
 800325c:	1891      	adds	r1, r2, r2
 800325e:	61b9      	str	r1, [r7, #24]
 8003260:	415b      	adcs	r3, r3
 8003262:	61fb      	str	r3, [r7, #28]
 8003264:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003268:	4641      	mov	r1, r8
 800326a:	1851      	adds	r1, r2, r1
 800326c:	6139      	str	r1, [r7, #16]
 800326e:	4649      	mov	r1, r9
 8003270:	414b      	adcs	r3, r1
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003280:	4659      	mov	r1, fp
 8003282:	00cb      	lsls	r3, r1, #3
 8003284:	4651      	mov	r1, sl
 8003286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800328a:	4651      	mov	r1, sl
 800328c:	00ca      	lsls	r2, r1, #3
 800328e:	4610      	mov	r0, r2
 8003290:	4619      	mov	r1, r3
 8003292:	4603      	mov	r3, r0
 8003294:	4642      	mov	r2, r8
 8003296:	189b      	adds	r3, r3, r2
 8003298:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800329c:	464b      	mov	r3, r9
 800329e:	460a      	mov	r2, r1
 80032a0:	eb42 0303 	adc.w	r3, r2, r3
 80032a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80032b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	f04f 0300 	mov.w	r3, #0
 80032bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80032c0:	4649      	mov	r1, r9
 80032c2:	008b      	lsls	r3, r1, #2
 80032c4:	4641      	mov	r1, r8
 80032c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032ca:	4641      	mov	r1, r8
 80032cc:	008a      	lsls	r2, r1, #2
 80032ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032d2:	f7fc ffdd 	bl	8000290 <__aeabi_uldivmod>
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	4b39      	ldr	r3, [pc, #228]	; (80033c0 <UART_SetConfig+0x4e4>)
 80032dc:	fba3 1302 	umull	r1, r3, r3, r2
 80032e0:	095b      	lsrs	r3, r3, #5
 80032e2:	2164      	movs	r1, #100	; 0x64
 80032e4:	fb01 f303 	mul.w	r3, r1, r3
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	3332      	adds	r3, #50	; 0x32
 80032ee:	4a34      	ldr	r2, [pc, #208]	; (80033c0 <UART_SetConfig+0x4e4>)
 80032f0:	fba2 2303 	umull	r2, r3, r2, r3
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032fa:	441c      	add	r4, r3
 80032fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003300:	2200      	movs	r2, #0
 8003302:	673b      	str	r3, [r7, #112]	; 0x70
 8003304:	677a      	str	r2, [r7, #116]	; 0x74
 8003306:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800330a:	4642      	mov	r2, r8
 800330c:	464b      	mov	r3, r9
 800330e:	1891      	adds	r1, r2, r2
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	415b      	adcs	r3, r3
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800331a:	4641      	mov	r1, r8
 800331c:	1851      	adds	r1, r2, r1
 800331e:	6039      	str	r1, [r7, #0]
 8003320:	4649      	mov	r1, r9
 8003322:	414b      	adcs	r3, r1
 8003324:	607b      	str	r3, [r7, #4]
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	f04f 0300 	mov.w	r3, #0
 800332e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003332:	4659      	mov	r1, fp
 8003334:	00cb      	lsls	r3, r1, #3
 8003336:	4651      	mov	r1, sl
 8003338:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800333c:	4651      	mov	r1, sl
 800333e:	00ca      	lsls	r2, r1, #3
 8003340:	4610      	mov	r0, r2
 8003342:	4619      	mov	r1, r3
 8003344:	4603      	mov	r3, r0
 8003346:	4642      	mov	r2, r8
 8003348:	189b      	adds	r3, r3, r2
 800334a:	66bb      	str	r3, [r7, #104]	; 0x68
 800334c:	464b      	mov	r3, r9
 800334e:	460a      	mov	r2, r1
 8003350:	eb42 0303 	adc.w	r3, r2, r3
 8003354:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	663b      	str	r3, [r7, #96]	; 0x60
 8003360:	667a      	str	r2, [r7, #100]	; 0x64
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800336e:	4649      	mov	r1, r9
 8003370:	008b      	lsls	r3, r1, #2
 8003372:	4641      	mov	r1, r8
 8003374:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003378:	4641      	mov	r1, r8
 800337a:	008a      	lsls	r2, r1, #2
 800337c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003380:	f7fc ff86 	bl	8000290 <__aeabi_uldivmod>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4b0d      	ldr	r3, [pc, #52]	; (80033c0 <UART_SetConfig+0x4e4>)
 800338a:	fba3 1302 	umull	r1, r3, r3, r2
 800338e:	095b      	lsrs	r3, r3, #5
 8003390:	2164      	movs	r1, #100	; 0x64
 8003392:	fb01 f303 	mul.w	r3, r1, r3
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	3332      	adds	r3, #50	; 0x32
 800339c:	4a08      	ldr	r2, [pc, #32]	; (80033c0 <UART_SetConfig+0x4e4>)
 800339e:	fba2 2303 	umull	r2, r3, r2, r3
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	f003 020f 	and.w	r2, r3, #15
 80033a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4422      	add	r2, r4
 80033b0:	609a      	str	r2, [r3, #8]
}
 80033b2:	bf00      	nop
 80033b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80033b8:	46bd      	mov	sp, r7
 80033ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033be:	bf00      	nop
 80033c0:	51eb851f 	.word	0x51eb851f

080033c4 <IR_REMOTE_RxFailCallback>:
#include "IR_Remote.h"

__weak void IR_REMOTE_RxCpltCallback(DECODED_DATA_t *decode_value){}
__weak void IR_REMOTE_RxFailCallback(){}
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	bf00      	nop
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <decode>:
 * @note	Add more case in switch-case structure if using more decoding types
 * @param	ir_data			Pointer to IR_DATA_t structure
 * @retval	None
 */
static void decode(IR_DATA_t *ir_data)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
	switch(ir_data->decoded_data.decoding_type)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 31a5 	ldrb.w	r3, [r3, #421]	; 0x1a5
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d11a      	bne.n	800341a <decode+0x48>
	{
		case DECODE_TYPE_NEC:
			if(NEC_Decode(	ir_data->raw_data_buf, ir_data->raw_data_len,
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f103 0014 	add.w	r0, r3, #20
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 11a4 	ldrb.w	r1, [r3, #420]	; 0x1a4
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f503 72d3 	add.w	r2, r3, #422	; 0x1a6
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f203 13a7 	addw	r3, r3, #423	; 0x1a7
 80033fc:	f000 f8e2 	bl	80035c4 <NEC_Decode>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d006      	beq.n	8003414 <decode+0x42>
							&ir_data->decoded_data.value.NEC.address,
							&ir_data->decoded_data.value.NEC.command))
			{
				IR_REMOTE_RxCpltCallback(&ir_data->decoded_data);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f203 13a5 	addw	r3, r3, #421	; 0x1a5
 800340c:	4618      	mov	r0, r3
 800340e:	f7fd f8dd 	bl	80005cc <IR_REMOTE_RxCpltCallback>
			}
			else
			{
				IR_REMOTE_RxFailCallback();
			}
			break;
 8003412:	e001      	b.n	8003418 <decode+0x46>
				IR_REMOTE_RxFailCallback();
 8003414:	f7ff ffd6 	bl	80033c4 <IR_REMOTE_RxFailCallback>
			break;
 8003418:	bf00      	nop
	}
}
 800341a:	bf00      	nop
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <IR_REMOTE_Init>:
 * @param	decoding_type	Decoding type of IR receiver
 * 							This parameter can be one of the GPIO_PinState enum values
 * @retval	None
 */
void IR_REMOTE_Init(IR_DATA_t *ir_data, GPIO_TypeDef *gpio_port, uint16_t gpio_pin, TIM_HandleTypeDef *htim, DECODING_TYPE_t decoding_type)
{
 8003422:	b480      	push	{r7}
 8003424:	b085      	sub	sp, #20
 8003426:	af00      	add	r7, sp, #0
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	603b      	str	r3, [r7, #0]
 800342e:	4613      	mov	r3, r2
 8003430:	80fb      	strh	r3, [r7, #6]
	ir_data->rx_gpio_port = gpio_port;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	601a      	str	r2, [r3, #0]
	ir_data->rx_gpio_pin = gpio_pin;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	88fa      	ldrh	r2, [r7, #6]
 800343c:	809a      	strh	r2, [r3, #4]
	ir_data->htim = htim;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	609a      	str	r2, [r3, #8]
	ir_data->decoded_data.decoding_type = decoding_type;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	7e3a      	ldrb	r2, [r7, #24]
 8003448:	f883 21a5 	strb.w	r2, [r3, #421]	; 0x1a5
}
 800344c:	bf00      	nop
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <IR_REMOTE_EXTI_Handle>:
 * @note	Call this function in external interrupt function
 * @param	ir_data			Pointer to IR_DATA_t structure
 * @retval	None
 */
void IR_REMOTE_EXTI_Handle(IR_DATA_t *ir_data)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
	// Start receiving process when EXTI pin detect 1st falling edge.
	if(!HAL_GPIO_ReadPin(ir_data->rx_gpio_port, ir_data->rx_gpio_pin) && ir_data->receiving_state == IR_IDLE_STATE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	889b      	ldrh	r3, [r3, #4]
 8003468:	4619      	mov	r1, r3
 800346a:	4610      	mov	r0, r2
 800346c:	f7fd ff3c 	bl	80012e8 <HAL_GPIO_ReadPin>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d118      	bne.n	80034a8 <IR_REMOTE_EXTI_Handle+0x50>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	7b1b      	ldrb	r3, [r3, #12]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d114      	bne.n	80034a8 <IR_REMOTE_EXTI_Handle+0x50>
	{
		// Set receiving state
		ir_data->receiving_state = IR_RECEIVING_MARK_STATE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	731a      	strb	r2, [r3, #12]
		// Reset data
		ir_data->timer = 0;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	611a      	str	r2, [r3, #16]
		ir_data->raw_data_len = 0;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
		// Set counter register of timer to overflow after 50us
		ir_data->htim->Instance->CNT = -40;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0227 	mvn.w	r2, #39	; 0x27
 800349c:	625a      	str	r2, [r3, #36]	; 0x24
		// Start timer
		HAL_TIM_Base_Start_IT(ir_data->htim);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fe fc12 	bl	8001ccc <HAL_TIM_Base_Start_IT>
	}
}
 80034a8:	bf00      	nop
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <IR_REMOTE_TIMI_Handle>:
 * @note	Call this function in timer update interrupt function
 * @param	ir_data			Pointer to IR_DATA_t structure
 * @retval	None
 */
void IR_REMOTE_TIMI_Handle(IR_DATA_t *ir_data, TIM_HandleTypeDef *htim)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
	if(htim->Instance == ir_data->htim->Instance)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d17a      	bne.n	80035be <IR_REMOTE_TIMI_Handle+0x10e>
	{
		ir_data->htim->Instance->CNT = -40;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f06f 0227 	mvn.w	r2, #39	; 0x27
 80034d2:	625a      	str	r2, [r3, #36]	; 0x24
		//get rx pin's logic state in current time
		uint8_t rx_pin_state = HAL_GPIO_ReadPin(ir_data->rx_gpio_port, ir_data->rx_gpio_pin);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	889b      	ldrh	r3, [r3, #4]
 80034dc:	4619      	mov	r1, r3
 80034de:	4610      	mov	r0, r2
 80034e0:	f7fd ff02 	bl	80012e8 <HAL_GPIO_ReadPin>
 80034e4:	4603      	mov	r3, r0
 80034e6:	73fb      	strb	r3, [r7, #15]

		ir_data->timer += 20; // + 50us every time timer overflow
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	f103 0214 	add.w	r2, r3, #20
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	611a      	str	r2, [r3, #16]

		// Stop if buffer overflow
		if(ir_data->raw_data_len > MAX_RAW_DATA_LEN)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 80034fa:	2b64      	cmp	r3, #100	; 0x64
 80034fc:	d902      	bls.n	8003504 <IR_REMOTE_TIMI_Handle+0x54>
		{
			ir_data->receiving_state = IR_STOP_RECEIVNING_STATE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2203      	movs	r2, #3
 8003502:	731a      	strb	r2, [r3, #12]
		}

		switch(ir_data->receiving_state)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	7b1b      	ldrb	r3, [r3, #12]
 8003508:	2b03      	cmp	r3, #3
 800350a:	d858      	bhi.n	80035be <IR_REMOTE_TIMI_Handle+0x10e>
 800350c:	a201      	add	r2, pc, #4	; (adr r2, 8003514 <IR_REMOTE_TIMI_Handle+0x64>)
 800350e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003512:	bf00      	nop
 8003514:	080035bf 	.word	0x080035bf
 8003518:	08003525 	.word	0x08003525
 800351c:	08003559 	.word	0x08003559
 8003520:	080035a1 	.word	0x080035a1
		{
			case IR_IDLE_STATE:
				break;
			case IR_RECEIVING_MARK_STATE:
				// Change state if rx pin change logic state
				if(rx_pin_state == IR_SPACE_LOGIC_LEVEL)
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d146      	bne.n	80035b8 <IR_REMOTE_TIMI_Handle+0x108>
				{
					ir_data->raw_data_buf[ir_data->raw_data_len++] = ir_data->timer;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	b2d1      	uxtb	r1, r2
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	f882 11a4 	strb.w	r1, [r2, #420]	; 0x1a4
 800353a:	4618      	mov	r0, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	1d03      	adds	r3, r0, #4
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	605a      	str	r2, [r3, #4]
					ir_data->timer = 0;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	611a      	str	r2, [r3, #16]
					ir_data->receiving_state = IR_RECEIVING_SPACE_STATE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	731a      	strb	r2, [r3, #12]
				}
				break;
 8003556:	e02f      	b.n	80035b8 <IR_REMOTE_TIMI_Handle+0x108>
			case IR_RECEIVING_SPACE_STATE:
				// Change state if rx pin change logic state
				if(rx_pin_state == IR_MARK_LOGIC_LEVEL)
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d116      	bne.n	800358c <IR_REMOTE_TIMI_Handle+0xdc>
				{
					ir_data->raw_data_buf[ir_data->raw_data_len++] = ir_data->timer;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	b2d1      	uxtb	r1, r2
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	f882 11a4 	strb.w	r1, [r2, #420]	; 0x1a4
 800356e:	4618      	mov	r0, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	1d03      	adds	r3, r0, #4
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	605a      	str	r2, [r3, #4]
					ir_data->timer = 0;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	611a      	str	r2, [r3, #16]
					ir_data->receiving_state = IR_RECEIVING_MARK_STATE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	731a      	strb	r2, [r3, #12]
					if(ir_data->timer > IR_TIMEOUT_VALUE)
					{
						ir_data->receiving_state = IR_STOP_RECEIVNING_STATE;
					}
				}
				break;
 800358a:	e017      	b.n	80035bc <IR_REMOTE_TIMI_Handle+0x10c>
					if(ir_data->timer > IR_TIMEOUT_VALUE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f241 3288 	movw	r2, #5000	; 0x1388
 8003594:	4293      	cmp	r3, r2
 8003596:	d911      	bls.n	80035bc <IR_REMOTE_TIMI_Handle+0x10c>
						ir_data->receiving_state = IR_STOP_RECEIVNING_STATE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2203      	movs	r2, #3
 800359c:	731a      	strb	r2, [r3, #12]
				break;
 800359e:	e00d      	b.n	80035bc <IR_REMOTE_TIMI_Handle+0x10c>
			case IR_STOP_RECEIVNING_STATE:
				// Set receiving state to idle.
				ir_data->receiving_state = IR_IDLE_STATE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	731a      	strb	r2, [r3, #12]
				// Stop timer.
				HAL_TIM_Base_Stop_IT(ir_data->htim);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fe fbf0 	bl	8001d90 <HAL_TIM_Base_Stop_IT>
				decode(ir_data);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7ff ff0e 	bl	80033d2 <decode>
				return;
 80035b6:	e002      	b.n	80035be <IR_REMOTE_TIMI_Handle+0x10e>
				break;
 80035b8:	bf00      	nop
 80035ba:	e000      	b.n	80035be <IR_REMOTE_TIMI_Handle+0x10e>
				break;
 80035bc:	bf00      	nop
				break;
		}

	}
}
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <NEC_Decode>:
#include "NEC_Protocol.h"

uint8_t NEC_Decode(uint32_t *raw_data_buf, uint8_t raw_data_len, uint8_t *address_result, uint8_t *command_result)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b089      	sub	sp, #36	; 0x24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	607a      	str	r2, [r7, #4]
 80035ce:	603b      	str	r3, [r7, #0]
 80035d0:	460b      	mov	r3, r1
 80035d2:	72fb      	strb	r3, [r7, #11]
	uint32_t temp_data = 0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61fb      	str	r3, [r7, #28]
	uint8_t index = 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	76fb      	strb	r3, [r7, #27]
	// Checking header mark
	if(!__IS_MATCH(raw_data_buf[index], NEC_HEADER_MARK)) return IR_DECODE_FAIL;
 80035dc:	7efb      	ldrb	r3, [r7, #27]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	4413      	add	r3, r2
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f641 72a3 	movw	r2, #8099	; 0x1fa3
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d908      	bls.n	8003600 <NEC_Decode+0x3c>
 80035ee:	7efb      	ldrb	r3, [r7, #27]
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4413      	add	r3, r2
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f242 62ac 	movw	r2, #9900	; 0x26ac
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d901      	bls.n	8003604 <NEC_Decode+0x40>
 8003600:	2300      	movs	r3, #0
 8003602:	e0b2      	b.n	800376a <NEC_Decode+0x1a6>
	index++;
 8003604:	7efb      	ldrb	r3, [r7, #27]
 8003606:	3301      	adds	r3, #1
 8003608:	76fb      	strb	r3, [r7, #27]

	// Checking is it repeat signal
	if(	raw_data_len == 3 &&
 800360a:	7afb      	ldrb	r3, [r7, #11]
 800360c:	2b03      	cmp	r3, #3
 800360e:	d124      	bne.n	800365a <NEC_Decode+0x96>
		__IS_MATCH(raw_data_buf[index], NEC_REPEAT_SPACE) &&
 8003610:	7efb      	ldrb	r3, [r7, #27]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	4413      	add	r3, r2
 8003618:	681b      	ldr	r3, [r3, #0]
	if(	raw_data_len == 3 &&
 800361a:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 800361e:	d91c      	bls.n	800365a <NEC_Decode+0x96>
		__IS_MATCH(raw_data_buf[index], NEC_REPEAT_SPACE) &&
 8003620:	7efb      	ldrb	r3, [r7, #27]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	4413      	add	r3, r2
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f640 12ab 	movw	r2, #2475	; 0x9ab
 800362e:	4293      	cmp	r3, r2
 8003630:	d813      	bhi.n	800365a <NEC_Decode+0x96>
		__IS_MATCH(raw_data_buf[index + 1], NEC_BIT_MARK))
 8003632:	7efb      	ldrb	r3, [r7, #27]
 8003634:	3301      	adds	r3, #1
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4413      	add	r3, r2
 800363c:	681b      	ldr	r3, [r3, #0]
		__IS_MATCH(raw_data_buf[index], NEC_REPEAT_SPACE) &&
 800363e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8003642:	d30a      	bcc.n	800365a <NEC_Decode+0x96>
		__IS_MATCH(raw_data_buf[index + 1], NEC_BIT_MARK))
 8003644:	7efb      	ldrb	r3, [r7, #27]
 8003646:	3301      	adds	r3, #1
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4413      	add	r3, r2
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8003654:	d801      	bhi.n	800365a <NEC_Decode+0x96>
	{
		return IR_DECODE_CPLT;
 8003656:	2301      	movs	r3, #1
 8003658:	e087      	b.n	800376a <NEC_Decode+0x1a6>
	}

	// Checking header space
	if(!__IS_MATCH(raw_data_buf[index], NEC_HEADER_SPACE)) return IR_DECODE_FAIL;
 800365a:	7efb      	ldrb	r3, [r7, #27]
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4413      	add	r3, r2
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f640 72d1 	movw	r2, #4049	; 0xfd1
 8003668:	4293      	cmp	r3, r2
 800366a:	d908      	bls.n	800367e <NEC_Decode+0xba>
 800366c:	7efb      	ldrb	r3, [r7, #27]
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	4413      	add	r3, r2
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f241 3256 	movw	r2, #4950	; 0x1356
 800367a:	4293      	cmp	r3, r2
 800367c:	d901      	bls.n	8003682 <NEC_Decode+0xbe>
 800367e:	2300      	movs	r3, #0
 8003680:	e073      	b.n	800376a <NEC_Decode+0x1a6>
	index++;
 8003682:	7efb      	ldrb	r3, [r7, #27]
 8003684:	3301      	adds	r3, #1
 8003686:	76fb      	strb	r3, [r7, #27]

	// Decode 32 bits data
	for(int i = 0; i < 32; i++)
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	e046      	b.n	800371c <NEC_Decode+0x158>
	{
		if(!__IS_MATCH(raw_data_buf[index], NEC_BIT_MARK)) return IR_DECODE_FAIL;
 800368e:	7efb      	ldrb	r3, [r7, #27]
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	4413      	add	r3, r2
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800369c:	d307      	bcc.n	80036ae <NEC_Decode+0xea>
 800369e:	7efb      	ldrb	r3, [r7, #27]
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4413      	add	r3, r2
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80036ac:	d901      	bls.n	80036b2 <NEC_Decode+0xee>
 80036ae:	2300      	movs	r3, #0
 80036b0:	e05b      	b.n	800376a <NEC_Decode+0x1a6>
		index++;
 80036b2:	7efb      	ldrb	r3, [r7, #27]
 80036b4:	3301      	adds	r3, #1
 80036b6:	76fb      	strb	r3, [r7, #27]

		if(!__IS_MATCH(raw_data_buf[index], NEC_BIT_ONE_SPACE))
 80036b8:	7efb      	ldrb	r3, [r7, #27]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4413      	add	r3, r2
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 80036c6:	d307      	bcc.n	80036d8 <NEC_Decode+0x114>
 80036c8:	7efb      	ldrb	r3, [r7, #27]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	4413      	add	r3, r2
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 80036d6:	d905      	bls.n	80036e4 <NEC_Decode+0x120>
		{
			temp_data = (temp_data << 1) | 1;
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	61fb      	str	r3, [r7, #28]
 80036e2:	e015      	b.n	8003710 <NEC_Decode+0x14c>
		}
		else if(!__IS_MATCH(raw_data_buf[index], NEC_BIT_ZERO_SPACE))
 80036e4:	7efb      	ldrb	r3, [r7, #27]
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4413      	add	r3, r2
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80036f2:	d307      	bcc.n	8003704 <NEC_Decode+0x140>
 80036f4:	7efb      	ldrb	r3, [r7, #27]
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4413      	add	r3, r2
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 8003702:	d903      	bls.n	800370c <NEC_Decode+0x148>
		{
			temp_data <<= 1;
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	61fb      	str	r3, [r7, #28]
 800370a:	e001      	b.n	8003710 <NEC_Decode+0x14c>
		}
		else
		{
			return IR_DECODE_FAIL;
 800370c:	2300      	movs	r3, #0
 800370e:	e02c      	b.n	800376a <NEC_Decode+0x1a6>
		}
		index++;
 8003710:	7efb      	ldrb	r3, [r7, #27]
 8003712:	3301      	adds	r3, #1
 8003714:	76fb      	strb	r3, [r7, #27]
	for(int i = 0; i < 32; i++)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	3301      	adds	r3, #1
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	2b1f      	cmp	r3, #31
 8003720:	ddb5      	ble.n	800368e <NEC_Decode+0xca>
	}

	uint8_t temp_data_arr[4] = {(uint8_t)(temp_data >> 24), ~(uint8_t)(temp_data >> 16), (uint8_t)(temp_data >> 8), ~(uint8_t)(temp_data)};
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	0e1b      	lsrs	r3, r3, #24
 8003726:	b2db      	uxtb	r3, r3
 8003728:	743b      	strb	r3, [r7, #16]
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	0c1b      	lsrs	r3, r3, #16
 800372e:	b2db      	uxtb	r3, r3
 8003730:	43db      	mvns	r3, r3
 8003732:	b2db      	uxtb	r3, r3
 8003734:	747b      	strb	r3, [r7, #17]
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	0a1b      	lsrs	r3, r3, #8
 800373a:	b2db      	uxtb	r3, r3
 800373c:	74bb      	strb	r3, [r7, #18]
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	b2db      	uxtb	r3, r3
 8003742:	43db      	mvns	r3, r3
 8003744:	b2db      	uxtb	r3, r3
 8003746:	74fb      	strb	r3, [r7, #19]
	if((temp_data_arr[0] == temp_data_arr[1]) && (temp_data_arr[2] == temp_data_arr[3]))
 8003748:	7c3a      	ldrb	r2, [r7, #16]
 800374a:	7c7b      	ldrb	r3, [r7, #17]
 800374c:	429a      	cmp	r2, r3
 800374e:	d10b      	bne.n	8003768 <NEC_Decode+0x1a4>
 8003750:	7cba      	ldrb	r2, [r7, #18]
 8003752:	7cfb      	ldrb	r3, [r7, #19]
 8003754:	429a      	cmp	r2, r3
 8003756:	d107      	bne.n	8003768 <NEC_Decode+0x1a4>
	{
		*address_result = temp_data_arr[0];
 8003758:	7c3a      	ldrb	r2, [r7, #16]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	701a      	strb	r2, [r3, #0]
		*command_result = temp_data_arr[2];
 800375e:	7cba      	ldrb	r2, [r7, #18]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	701a      	strb	r2, [r3, #0]
		return IR_DECODE_CPLT;
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <NEC_Decode+0x1a6>
	}

	return IR_DECODE_FAIL;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3724      	adds	r7, #36	; 0x24
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
	...

08003778 <__errno>:
 8003778:	4b01      	ldr	r3, [pc, #4]	; (8003780 <__errno+0x8>)
 800377a:	6818      	ldr	r0, [r3, #0]
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	2000000c 	.word	0x2000000c

08003784 <__libc_init_array>:
 8003784:	b570      	push	{r4, r5, r6, lr}
 8003786:	4d0d      	ldr	r5, [pc, #52]	; (80037bc <__libc_init_array+0x38>)
 8003788:	4c0d      	ldr	r4, [pc, #52]	; (80037c0 <__libc_init_array+0x3c>)
 800378a:	1b64      	subs	r4, r4, r5
 800378c:	10a4      	asrs	r4, r4, #2
 800378e:	2600      	movs	r6, #0
 8003790:	42a6      	cmp	r6, r4
 8003792:	d109      	bne.n	80037a8 <__libc_init_array+0x24>
 8003794:	4d0b      	ldr	r5, [pc, #44]	; (80037c4 <__libc_init_array+0x40>)
 8003796:	4c0c      	ldr	r4, [pc, #48]	; (80037c8 <__libc_init_array+0x44>)
 8003798:	f000 fc8e 	bl	80040b8 <_init>
 800379c:	1b64      	subs	r4, r4, r5
 800379e:	10a4      	asrs	r4, r4, #2
 80037a0:	2600      	movs	r6, #0
 80037a2:	42a6      	cmp	r6, r4
 80037a4:	d105      	bne.n	80037b2 <__libc_init_array+0x2e>
 80037a6:	bd70      	pop	{r4, r5, r6, pc}
 80037a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ac:	4798      	blx	r3
 80037ae:	3601      	adds	r6, #1
 80037b0:	e7ee      	b.n	8003790 <__libc_init_array+0xc>
 80037b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037b6:	4798      	blx	r3
 80037b8:	3601      	adds	r6, #1
 80037ba:	e7f2      	b.n	80037a2 <__libc_init_array+0x1e>
 80037bc:	08004140 	.word	0x08004140
 80037c0:	08004140 	.word	0x08004140
 80037c4:	08004140 	.word	0x08004140
 80037c8:	08004144 	.word	0x08004144

080037cc <memset>:
 80037cc:	4402      	add	r2, r0
 80037ce:	4603      	mov	r3, r0
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d100      	bne.n	80037d6 <memset+0xa>
 80037d4:	4770      	bx	lr
 80037d6:	f803 1b01 	strb.w	r1, [r3], #1
 80037da:	e7f9      	b.n	80037d0 <memset+0x4>

080037dc <siprintf>:
 80037dc:	b40e      	push	{r1, r2, r3}
 80037de:	b500      	push	{lr}
 80037e0:	b09c      	sub	sp, #112	; 0x70
 80037e2:	ab1d      	add	r3, sp, #116	; 0x74
 80037e4:	9002      	str	r0, [sp, #8]
 80037e6:	9006      	str	r0, [sp, #24]
 80037e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037ec:	4809      	ldr	r0, [pc, #36]	; (8003814 <siprintf+0x38>)
 80037ee:	9107      	str	r1, [sp, #28]
 80037f0:	9104      	str	r1, [sp, #16]
 80037f2:	4909      	ldr	r1, [pc, #36]	; (8003818 <siprintf+0x3c>)
 80037f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80037f8:	9105      	str	r1, [sp, #20]
 80037fa:	6800      	ldr	r0, [r0, #0]
 80037fc:	9301      	str	r3, [sp, #4]
 80037fe:	a902      	add	r1, sp, #8
 8003800:	f000 f868 	bl	80038d4 <_svfiprintf_r>
 8003804:	9b02      	ldr	r3, [sp, #8]
 8003806:	2200      	movs	r2, #0
 8003808:	701a      	strb	r2, [r3, #0]
 800380a:	b01c      	add	sp, #112	; 0x70
 800380c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003810:	b003      	add	sp, #12
 8003812:	4770      	bx	lr
 8003814:	2000000c 	.word	0x2000000c
 8003818:	ffff0208 	.word	0xffff0208

0800381c <__ssputs_r>:
 800381c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003820:	688e      	ldr	r6, [r1, #8]
 8003822:	429e      	cmp	r6, r3
 8003824:	4682      	mov	sl, r0
 8003826:	460c      	mov	r4, r1
 8003828:	4690      	mov	r8, r2
 800382a:	461f      	mov	r7, r3
 800382c:	d838      	bhi.n	80038a0 <__ssputs_r+0x84>
 800382e:	898a      	ldrh	r2, [r1, #12]
 8003830:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003834:	d032      	beq.n	800389c <__ssputs_r+0x80>
 8003836:	6825      	ldr	r5, [r4, #0]
 8003838:	6909      	ldr	r1, [r1, #16]
 800383a:	eba5 0901 	sub.w	r9, r5, r1
 800383e:	6965      	ldr	r5, [r4, #20]
 8003840:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003844:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003848:	3301      	adds	r3, #1
 800384a:	444b      	add	r3, r9
 800384c:	106d      	asrs	r5, r5, #1
 800384e:	429d      	cmp	r5, r3
 8003850:	bf38      	it	cc
 8003852:	461d      	movcc	r5, r3
 8003854:	0553      	lsls	r3, r2, #21
 8003856:	d531      	bpl.n	80038bc <__ssputs_r+0xa0>
 8003858:	4629      	mov	r1, r5
 800385a:	f000 fb63 	bl	8003f24 <_malloc_r>
 800385e:	4606      	mov	r6, r0
 8003860:	b950      	cbnz	r0, 8003878 <__ssputs_r+0x5c>
 8003862:	230c      	movs	r3, #12
 8003864:	f8ca 3000 	str.w	r3, [sl]
 8003868:	89a3      	ldrh	r3, [r4, #12]
 800386a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800386e:	81a3      	strh	r3, [r4, #12]
 8003870:	f04f 30ff 	mov.w	r0, #4294967295
 8003874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003878:	6921      	ldr	r1, [r4, #16]
 800387a:	464a      	mov	r2, r9
 800387c:	f000 fabe 	bl	8003dfc <memcpy>
 8003880:	89a3      	ldrh	r3, [r4, #12]
 8003882:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800388a:	81a3      	strh	r3, [r4, #12]
 800388c:	6126      	str	r6, [r4, #16]
 800388e:	6165      	str	r5, [r4, #20]
 8003890:	444e      	add	r6, r9
 8003892:	eba5 0509 	sub.w	r5, r5, r9
 8003896:	6026      	str	r6, [r4, #0]
 8003898:	60a5      	str	r5, [r4, #8]
 800389a:	463e      	mov	r6, r7
 800389c:	42be      	cmp	r6, r7
 800389e:	d900      	bls.n	80038a2 <__ssputs_r+0x86>
 80038a0:	463e      	mov	r6, r7
 80038a2:	6820      	ldr	r0, [r4, #0]
 80038a4:	4632      	mov	r2, r6
 80038a6:	4641      	mov	r1, r8
 80038a8:	f000 fab6 	bl	8003e18 <memmove>
 80038ac:	68a3      	ldr	r3, [r4, #8]
 80038ae:	1b9b      	subs	r3, r3, r6
 80038b0:	60a3      	str	r3, [r4, #8]
 80038b2:	6823      	ldr	r3, [r4, #0]
 80038b4:	4433      	add	r3, r6
 80038b6:	6023      	str	r3, [r4, #0]
 80038b8:	2000      	movs	r0, #0
 80038ba:	e7db      	b.n	8003874 <__ssputs_r+0x58>
 80038bc:	462a      	mov	r2, r5
 80038be:	f000 fba5 	bl	800400c <_realloc_r>
 80038c2:	4606      	mov	r6, r0
 80038c4:	2800      	cmp	r0, #0
 80038c6:	d1e1      	bne.n	800388c <__ssputs_r+0x70>
 80038c8:	6921      	ldr	r1, [r4, #16]
 80038ca:	4650      	mov	r0, sl
 80038cc:	f000 fabe 	bl	8003e4c <_free_r>
 80038d0:	e7c7      	b.n	8003862 <__ssputs_r+0x46>
	...

080038d4 <_svfiprintf_r>:
 80038d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038d8:	4698      	mov	r8, r3
 80038da:	898b      	ldrh	r3, [r1, #12]
 80038dc:	061b      	lsls	r3, r3, #24
 80038de:	b09d      	sub	sp, #116	; 0x74
 80038e0:	4607      	mov	r7, r0
 80038e2:	460d      	mov	r5, r1
 80038e4:	4614      	mov	r4, r2
 80038e6:	d50e      	bpl.n	8003906 <_svfiprintf_r+0x32>
 80038e8:	690b      	ldr	r3, [r1, #16]
 80038ea:	b963      	cbnz	r3, 8003906 <_svfiprintf_r+0x32>
 80038ec:	2140      	movs	r1, #64	; 0x40
 80038ee:	f000 fb19 	bl	8003f24 <_malloc_r>
 80038f2:	6028      	str	r0, [r5, #0]
 80038f4:	6128      	str	r0, [r5, #16]
 80038f6:	b920      	cbnz	r0, 8003902 <_svfiprintf_r+0x2e>
 80038f8:	230c      	movs	r3, #12
 80038fa:	603b      	str	r3, [r7, #0]
 80038fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003900:	e0d1      	b.n	8003aa6 <_svfiprintf_r+0x1d2>
 8003902:	2340      	movs	r3, #64	; 0x40
 8003904:	616b      	str	r3, [r5, #20]
 8003906:	2300      	movs	r3, #0
 8003908:	9309      	str	r3, [sp, #36]	; 0x24
 800390a:	2320      	movs	r3, #32
 800390c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003910:	f8cd 800c 	str.w	r8, [sp, #12]
 8003914:	2330      	movs	r3, #48	; 0x30
 8003916:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003ac0 <_svfiprintf_r+0x1ec>
 800391a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800391e:	f04f 0901 	mov.w	r9, #1
 8003922:	4623      	mov	r3, r4
 8003924:	469a      	mov	sl, r3
 8003926:	f813 2b01 	ldrb.w	r2, [r3], #1
 800392a:	b10a      	cbz	r2, 8003930 <_svfiprintf_r+0x5c>
 800392c:	2a25      	cmp	r2, #37	; 0x25
 800392e:	d1f9      	bne.n	8003924 <_svfiprintf_r+0x50>
 8003930:	ebba 0b04 	subs.w	fp, sl, r4
 8003934:	d00b      	beq.n	800394e <_svfiprintf_r+0x7a>
 8003936:	465b      	mov	r3, fp
 8003938:	4622      	mov	r2, r4
 800393a:	4629      	mov	r1, r5
 800393c:	4638      	mov	r0, r7
 800393e:	f7ff ff6d 	bl	800381c <__ssputs_r>
 8003942:	3001      	adds	r0, #1
 8003944:	f000 80aa 	beq.w	8003a9c <_svfiprintf_r+0x1c8>
 8003948:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800394a:	445a      	add	r2, fp
 800394c:	9209      	str	r2, [sp, #36]	; 0x24
 800394e:	f89a 3000 	ldrb.w	r3, [sl]
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 80a2 	beq.w	8003a9c <_svfiprintf_r+0x1c8>
 8003958:	2300      	movs	r3, #0
 800395a:	f04f 32ff 	mov.w	r2, #4294967295
 800395e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003962:	f10a 0a01 	add.w	sl, sl, #1
 8003966:	9304      	str	r3, [sp, #16]
 8003968:	9307      	str	r3, [sp, #28]
 800396a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800396e:	931a      	str	r3, [sp, #104]	; 0x68
 8003970:	4654      	mov	r4, sl
 8003972:	2205      	movs	r2, #5
 8003974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003978:	4851      	ldr	r0, [pc, #324]	; (8003ac0 <_svfiprintf_r+0x1ec>)
 800397a:	f7fc fc39 	bl	80001f0 <memchr>
 800397e:	9a04      	ldr	r2, [sp, #16]
 8003980:	b9d8      	cbnz	r0, 80039ba <_svfiprintf_r+0xe6>
 8003982:	06d0      	lsls	r0, r2, #27
 8003984:	bf44      	itt	mi
 8003986:	2320      	movmi	r3, #32
 8003988:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800398c:	0711      	lsls	r1, r2, #28
 800398e:	bf44      	itt	mi
 8003990:	232b      	movmi	r3, #43	; 0x2b
 8003992:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003996:	f89a 3000 	ldrb.w	r3, [sl]
 800399a:	2b2a      	cmp	r3, #42	; 0x2a
 800399c:	d015      	beq.n	80039ca <_svfiprintf_r+0xf6>
 800399e:	9a07      	ldr	r2, [sp, #28]
 80039a0:	4654      	mov	r4, sl
 80039a2:	2000      	movs	r0, #0
 80039a4:	f04f 0c0a 	mov.w	ip, #10
 80039a8:	4621      	mov	r1, r4
 80039aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039ae:	3b30      	subs	r3, #48	; 0x30
 80039b0:	2b09      	cmp	r3, #9
 80039b2:	d94e      	bls.n	8003a52 <_svfiprintf_r+0x17e>
 80039b4:	b1b0      	cbz	r0, 80039e4 <_svfiprintf_r+0x110>
 80039b6:	9207      	str	r2, [sp, #28]
 80039b8:	e014      	b.n	80039e4 <_svfiprintf_r+0x110>
 80039ba:	eba0 0308 	sub.w	r3, r0, r8
 80039be:	fa09 f303 	lsl.w	r3, r9, r3
 80039c2:	4313      	orrs	r3, r2
 80039c4:	9304      	str	r3, [sp, #16]
 80039c6:	46a2      	mov	sl, r4
 80039c8:	e7d2      	b.n	8003970 <_svfiprintf_r+0x9c>
 80039ca:	9b03      	ldr	r3, [sp, #12]
 80039cc:	1d19      	adds	r1, r3, #4
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	9103      	str	r1, [sp, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	bfbb      	ittet	lt
 80039d6:	425b      	neglt	r3, r3
 80039d8:	f042 0202 	orrlt.w	r2, r2, #2
 80039dc:	9307      	strge	r3, [sp, #28]
 80039de:	9307      	strlt	r3, [sp, #28]
 80039e0:	bfb8      	it	lt
 80039e2:	9204      	strlt	r2, [sp, #16]
 80039e4:	7823      	ldrb	r3, [r4, #0]
 80039e6:	2b2e      	cmp	r3, #46	; 0x2e
 80039e8:	d10c      	bne.n	8003a04 <_svfiprintf_r+0x130>
 80039ea:	7863      	ldrb	r3, [r4, #1]
 80039ec:	2b2a      	cmp	r3, #42	; 0x2a
 80039ee:	d135      	bne.n	8003a5c <_svfiprintf_r+0x188>
 80039f0:	9b03      	ldr	r3, [sp, #12]
 80039f2:	1d1a      	adds	r2, r3, #4
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	9203      	str	r2, [sp, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	bfb8      	it	lt
 80039fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a00:	3402      	adds	r4, #2
 8003a02:	9305      	str	r3, [sp, #20]
 8003a04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ad0 <_svfiprintf_r+0x1fc>
 8003a08:	7821      	ldrb	r1, [r4, #0]
 8003a0a:	2203      	movs	r2, #3
 8003a0c:	4650      	mov	r0, sl
 8003a0e:	f7fc fbef 	bl	80001f0 <memchr>
 8003a12:	b140      	cbz	r0, 8003a26 <_svfiprintf_r+0x152>
 8003a14:	2340      	movs	r3, #64	; 0x40
 8003a16:	eba0 000a 	sub.w	r0, r0, sl
 8003a1a:	fa03 f000 	lsl.w	r0, r3, r0
 8003a1e:	9b04      	ldr	r3, [sp, #16]
 8003a20:	4303      	orrs	r3, r0
 8003a22:	3401      	adds	r4, #1
 8003a24:	9304      	str	r3, [sp, #16]
 8003a26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a2a:	4826      	ldr	r0, [pc, #152]	; (8003ac4 <_svfiprintf_r+0x1f0>)
 8003a2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a30:	2206      	movs	r2, #6
 8003a32:	f7fc fbdd 	bl	80001f0 <memchr>
 8003a36:	2800      	cmp	r0, #0
 8003a38:	d038      	beq.n	8003aac <_svfiprintf_r+0x1d8>
 8003a3a:	4b23      	ldr	r3, [pc, #140]	; (8003ac8 <_svfiprintf_r+0x1f4>)
 8003a3c:	bb1b      	cbnz	r3, 8003a86 <_svfiprintf_r+0x1b2>
 8003a3e:	9b03      	ldr	r3, [sp, #12]
 8003a40:	3307      	adds	r3, #7
 8003a42:	f023 0307 	bic.w	r3, r3, #7
 8003a46:	3308      	adds	r3, #8
 8003a48:	9303      	str	r3, [sp, #12]
 8003a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a4c:	4433      	add	r3, r6
 8003a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a50:	e767      	b.n	8003922 <_svfiprintf_r+0x4e>
 8003a52:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a56:	460c      	mov	r4, r1
 8003a58:	2001      	movs	r0, #1
 8003a5a:	e7a5      	b.n	80039a8 <_svfiprintf_r+0xd4>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	3401      	adds	r4, #1
 8003a60:	9305      	str	r3, [sp, #20]
 8003a62:	4619      	mov	r1, r3
 8003a64:	f04f 0c0a 	mov.w	ip, #10
 8003a68:	4620      	mov	r0, r4
 8003a6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a6e:	3a30      	subs	r2, #48	; 0x30
 8003a70:	2a09      	cmp	r2, #9
 8003a72:	d903      	bls.n	8003a7c <_svfiprintf_r+0x1a8>
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0c5      	beq.n	8003a04 <_svfiprintf_r+0x130>
 8003a78:	9105      	str	r1, [sp, #20]
 8003a7a:	e7c3      	b.n	8003a04 <_svfiprintf_r+0x130>
 8003a7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a80:	4604      	mov	r4, r0
 8003a82:	2301      	movs	r3, #1
 8003a84:	e7f0      	b.n	8003a68 <_svfiprintf_r+0x194>
 8003a86:	ab03      	add	r3, sp, #12
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	462a      	mov	r2, r5
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <_svfiprintf_r+0x1f8>)
 8003a8e:	a904      	add	r1, sp, #16
 8003a90:	4638      	mov	r0, r7
 8003a92:	f3af 8000 	nop.w
 8003a96:	1c42      	adds	r2, r0, #1
 8003a98:	4606      	mov	r6, r0
 8003a9a:	d1d6      	bne.n	8003a4a <_svfiprintf_r+0x176>
 8003a9c:	89ab      	ldrh	r3, [r5, #12]
 8003a9e:	065b      	lsls	r3, r3, #25
 8003aa0:	f53f af2c 	bmi.w	80038fc <_svfiprintf_r+0x28>
 8003aa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003aa6:	b01d      	add	sp, #116	; 0x74
 8003aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aac:	ab03      	add	r3, sp, #12
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	462a      	mov	r2, r5
 8003ab2:	4b06      	ldr	r3, [pc, #24]	; (8003acc <_svfiprintf_r+0x1f8>)
 8003ab4:	a904      	add	r1, sp, #16
 8003ab6:	4638      	mov	r0, r7
 8003ab8:	f000 f87a 	bl	8003bb0 <_printf_i>
 8003abc:	e7eb      	b.n	8003a96 <_svfiprintf_r+0x1c2>
 8003abe:	bf00      	nop
 8003ac0:	08004104 	.word	0x08004104
 8003ac4:	0800410e 	.word	0x0800410e
 8003ac8:	00000000 	.word	0x00000000
 8003acc:	0800381d 	.word	0x0800381d
 8003ad0:	0800410a 	.word	0x0800410a

08003ad4 <_printf_common>:
 8003ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ad8:	4616      	mov	r6, r2
 8003ada:	4699      	mov	r9, r3
 8003adc:	688a      	ldr	r2, [r1, #8]
 8003ade:	690b      	ldr	r3, [r1, #16]
 8003ae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	bfb8      	it	lt
 8003ae8:	4613      	movlt	r3, r2
 8003aea:	6033      	str	r3, [r6, #0]
 8003aec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003af0:	4607      	mov	r7, r0
 8003af2:	460c      	mov	r4, r1
 8003af4:	b10a      	cbz	r2, 8003afa <_printf_common+0x26>
 8003af6:	3301      	adds	r3, #1
 8003af8:	6033      	str	r3, [r6, #0]
 8003afa:	6823      	ldr	r3, [r4, #0]
 8003afc:	0699      	lsls	r1, r3, #26
 8003afe:	bf42      	ittt	mi
 8003b00:	6833      	ldrmi	r3, [r6, #0]
 8003b02:	3302      	addmi	r3, #2
 8003b04:	6033      	strmi	r3, [r6, #0]
 8003b06:	6825      	ldr	r5, [r4, #0]
 8003b08:	f015 0506 	ands.w	r5, r5, #6
 8003b0c:	d106      	bne.n	8003b1c <_printf_common+0x48>
 8003b0e:	f104 0a19 	add.w	sl, r4, #25
 8003b12:	68e3      	ldr	r3, [r4, #12]
 8003b14:	6832      	ldr	r2, [r6, #0]
 8003b16:	1a9b      	subs	r3, r3, r2
 8003b18:	42ab      	cmp	r3, r5
 8003b1a:	dc26      	bgt.n	8003b6a <_printf_common+0x96>
 8003b1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b20:	1e13      	subs	r3, r2, #0
 8003b22:	6822      	ldr	r2, [r4, #0]
 8003b24:	bf18      	it	ne
 8003b26:	2301      	movne	r3, #1
 8003b28:	0692      	lsls	r2, r2, #26
 8003b2a:	d42b      	bmi.n	8003b84 <_printf_common+0xb0>
 8003b2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b30:	4649      	mov	r1, r9
 8003b32:	4638      	mov	r0, r7
 8003b34:	47c0      	blx	r8
 8003b36:	3001      	adds	r0, #1
 8003b38:	d01e      	beq.n	8003b78 <_printf_common+0xa4>
 8003b3a:	6823      	ldr	r3, [r4, #0]
 8003b3c:	68e5      	ldr	r5, [r4, #12]
 8003b3e:	6832      	ldr	r2, [r6, #0]
 8003b40:	f003 0306 	and.w	r3, r3, #6
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	bf08      	it	eq
 8003b48:	1aad      	subeq	r5, r5, r2
 8003b4a:	68a3      	ldr	r3, [r4, #8]
 8003b4c:	6922      	ldr	r2, [r4, #16]
 8003b4e:	bf0c      	ite	eq
 8003b50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b54:	2500      	movne	r5, #0
 8003b56:	4293      	cmp	r3, r2
 8003b58:	bfc4      	itt	gt
 8003b5a:	1a9b      	subgt	r3, r3, r2
 8003b5c:	18ed      	addgt	r5, r5, r3
 8003b5e:	2600      	movs	r6, #0
 8003b60:	341a      	adds	r4, #26
 8003b62:	42b5      	cmp	r5, r6
 8003b64:	d11a      	bne.n	8003b9c <_printf_common+0xc8>
 8003b66:	2000      	movs	r0, #0
 8003b68:	e008      	b.n	8003b7c <_printf_common+0xa8>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	4652      	mov	r2, sl
 8003b6e:	4649      	mov	r1, r9
 8003b70:	4638      	mov	r0, r7
 8003b72:	47c0      	blx	r8
 8003b74:	3001      	adds	r0, #1
 8003b76:	d103      	bne.n	8003b80 <_printf_common+0xac>
 8003b78:	f04f 30ff 	mov.w	r0, #4294967295
 8003b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b80:	3501      	adds	r5, #1
 8003b82:	e7c6      	b.n	8003b12 <_printf_common+0x3e>
 8003b84:	18e1      	adds	r1, r4, r3
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	2030      	movs	r0, #48	; 0x30
 8003b8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b8e:	4422      	add	r2, r4
 8003b90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b98:	3302      	adds	r3, #2
 8003b9a:	e7c7      	b.n	8003b2c <_printf_common+0x58>
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	4622      	mov	r2, r4
 8003ba0:	4649      	mov	r1, r9
 8003ba2:	4638      	mov	r0, r7
 8003ba4:	47c0      	blx	r8
 8003ba6:	3001      	adds	r0, #1
 8003ba8:	d0e6      	beq.n	8003b78 <_printf_common+0xa4>
 8003baa:	3601      	adds	r6, #1
 8003bac:	e7d9      	b.n	8003b62 <_printf_common+0x8e>
	...

08003bb0 <_printf_i>:
 8003bb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bb4:	7e0f      	ldrb	r7, [r1, #24]
 8003bb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003bb8:	2f78      	cmp	r7, #120	; 0x78
 8003bba:	4691      	mov	r9, r2
 8003bbc:	4680      	mov	r8, r0
 8003bbe:	460c      	mov	r4, r1
 8003bc0:	469a      	mov	sl, r3
 8003bc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003bc6:	d807      	bhi.n	8003bd8 <_printf_i+0x28>
 8003bc8:	2f62      	cmp	r7, #98	; 0x62
 8003bca:	d80a      	bhi.n	8003be2 <_printf_i+0x32>
 8003bcc:	2f00      	cmp	r7, #0
 8003bce:	f000 80d8 	beq.w	8003d82 <_printf_i+0x1d2>
 8003bd2:	2f58      	cmp	r7, #88	; 0x58
 8003bd4:	f000 80a3 	beq.w	8003d1e <_printf_i+0x16e>
 8003bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003be0:	e03a      	b.n	8003c58 <_printf_i+0xa8>
 8003be2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003be6:	2b15      	cmp	r3, #21
 8003be8:	d8f6      	bhi.n	8003bd8 <_printf_i+0x28>
 8003bea:	a101      	add	r1, pc, #4	; (adr r1, 8003bf0 <_printf_i+0x40>)
 8003bec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bf0:	08003c49 	.word	0x08003c49
 8003bf4:	08003c5d 	.word	0x08003c5d
 8003bf8:	08003bd9 	.word	0x08003bd9
 8003bfc:	08003bd9 	.word	0x08003bd9
 8003c00:	08003bd9 	.word	0x08003bd9
 8003c04:	08003bd9 	.word	0x08003bd9
 8003c08:	08003c5d 	.word	0x08003c5d
 8003c0c:	08003bd9 	.word	0x08003bd9
 8003c10:	08003bd9 	.word	0x08003bd9
 8003c14:	08003bd9 	.word	0x08003bd9
 8003c18:	08003bd9 	.word	0x08003bd9
 8003c1c:	08003d69 	.word	0x08003d69
 8003c20:	08003c8d 	.word	0x08003c8d
 8003c24:	08003d4b 	.word	0x08003d4b
 8003c28:	08003bd9 	.word	0x08003bd9
 8003c2c:	08003bd9 	.word	0x08003bd9
 8003c30:	08003d8b 	.word	0x08003d8b
 8003c34:	08003bd9 	.word	0x08003bd9
 8003c38:	08003c8d 	.word	0x08003c8d
 8003c3c:	08003bd9 	.word	0x08003bd9
 8003c40:	08003bd9 	.word	0x08003bd9
 8003c44:	08003d53 	.word	0x08003d53
 8003c48:	682b      	ldr	r3, [r5, #0]
 8003c4a:	1d1a      	adds	r2, r3, #4
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	602a      	str	r2, [r5, #0]
 8003c50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e0a3      	b.n	8003da4 <_printf_i+0x1f4>
 8003c5c:	6820      	ldr	r0, [r4, #0]
 8003c5e:	6829      	ldr	r1, [r5, #0]
 8003c60:	0606      	lsls	r6, r0, #24
 8003c62:	f101 0304 	add.w	r3, r1, #4
 8003c66:	d50a      	bpl.n	8003c7e <_printf_i+0xce>
 8003c68:	680e      	ldr	r6, [r1, #0]
 8003c6a:	602b      	str	r3, [r5, #0]
 8003c6c:	2e00      	cmp	r6, #0
 8003c6e:	da03      	bge.n	8003c78 <_printf_i+0xc8>
 8003c70:	232d      	movs	r3, #45	; 0x2d
 8003c72:	4276      	negs	r6, r6
 8003c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c78:	485e      	ldr	r0, [pc, #376]	; (8003df4 <_printf_i+0x244>)
 8003c7a:	230a      	movs	r3, #10
 8003c7c:	e019      	b.n	8003cb2 <_printf_i+0x102>
 8003c7e:	680e      	ldr	r6, [r1, #0]
 8003c80:	602b      	str	r3, [r5, #0]
 8003c82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c86:	bf18      	it	ne
 8003c88:	b236      	sxthne	r6, r6
 8003c8a:	e7ef      	b.n	8003c6c <_printf_i+0xbc>
 8003c8c:	682b      	ldr	r3, [r5, #0]
 8003c8e:	6820      	ldr	r0, [r4, #0]
 8003c90:	1d19      	adds	r1, r3, #4
 8003c92:	6029      	str	r1, [r5, #0]
 8003c94:	0601      	lsls	r1, r0, #24
 8003c96:	d501      	bpl.n	8003c9c <_printf_i+0xec>
 8003c98:	681e      	ldr	r6, [r3, #0]
 8003c9a:	e002      	b.n	8003ca2 <_printf_i+0xf2>
 8003c9c:	0646      	lsls	r6, r0, #25
 8003c9e:	d5fb      	bpl.n	8003c98 <_printf_i+0xe8>
 8003ca0:	881e      	ldrh	r6, [r3, #0]
 8003ca2:	4854      	ldr	r0, [pc, #336]	; (8003df4 <_printf_i+0x244>)
 8003ca4:	2f6f      	cmp	r7, #111	; 0x6f
 8003ca6:	bf0c      	ite	eq
 8003ca8:	2308      	moveq	r3, #8
 8003caa:	230a      	movne	r3, #10
 8003cac:	2100      	movs	r1, #0
 8003cae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cb2:	6865      	ldr	r5, [r4, #4]
 8003cb4:	60a5      	str	r5, [r4, #8]
 8003cb6:	2d00      	cmp	r5, #0
 8003cb8:	bfa2      	ittt	ge
 8003cba:	6821      	ldrge	r1, [r4, #0]
 8003cbc:	f021 0104 	bicge.w	r1, r1, #4
 8003cc0:	6021      	strge	r1, [r4, #0]
 8003cc2:	b90e      	cbnz	r6, 8003cc8 <_printf_i+0x118>
 8003cc4:	2d00      	cmp	r5, #0
 8003cc6:	d04d      	beq.n	8003d64 <_printf_i+0x1b4>
 8003cc8:	4615      	mov	r5, r2
 8003cca:	fbb6 f1f3 	udiv	r1, r6, r3
 8003cce:	fb03 6711 	mls	r7, r3, r1, r6
 8003cd2:	5dc7      	ldrb	r7, [r0, r7]
 8003cd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003cd8:	4637      	mov	r7, r6
 8003cda:	42bb      	cmp	r3, r7
 8003cdc:	460e      	mov	r6, r1
 8003cde:	d9f4      	bls.n	8003cca <_printf_i+0x11a>
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d10b      	bne.n	8003cfc <_printf_i+0x14c>
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	07de      	lsls	r6, r3, #31
 8003ce8:	d508      	bpl.n	8003cfc <_printf_i+0x14c>
 8003cea:	6923      	ldr	r3, [r4, #16]
 8003cec:	6861      	ldr	r1, [r4, #4]
 8003cee:	4299      	cmp	r1, r3
 8003cf0:	bfde      	ittt	le
 8003cf2:	2330      	movle	r3, #48	; 0x30
 8003cf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003cfc:	1b52      	subs	r2, r2, r5
 8003cfe:	6122      	str	r2, [r4, #16]
 8003d00:	f8cd a000 	str.w	sl, [sp]
 8003d04:	464b      	mov	r3, r9
 8003d06:	aa03      	add	r2, sp, #12
 8003d08:	4621      	mov	r1, r4
 8003d0a:	4640      	mov	r0, r8
 8003d0c:	f7ff fee2 	bl	8003ad4 <_printf_common>
 8003d10:	3001      	adds	r0, #1
 8003d12:	d14c      	bne.n	8003dae <_printf_i+0x1fe>
 8003d14:	f04f 30ff 	mov.w	r0, #4294967295
 8003d18:	b004      	add	sp, #16
 8003d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d1e:	4835      	ldr	r0, [pc, #212]	; (8003df4 <_printf_i+0x244>)
 8003d20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d24:	6829      	ldr	r1, [r5, #0]
 8003d26:	6823      	ldr	r3, [r4, #0]
 8003d28:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d2c:	6029      	str	r1, [r5, #0]
 8003d2e:	061d      	lsls	r5, r3, #24
 8003d30:	d514      	bpl.n	8003d5c <_printf_i+0x1ac>
 8003d32:	07df      	lsls	r7, r3, #31
 8003d34:	bf44      	itt	mi
 8003d36:	f043 0320 	orrmi.w	r3, r3, #32
 8003d3a:	6023      	strmi	r3, [r4, #0]
 8003d3c:	b91e      	cbnz	r6, 8003d46 <_printf_i+0x196>
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	f023 0320 	bic.w	r3, r3, #32
 8003d44:	6023      	str	r3, [r4, #0]
 8003d46:	2310      	movs	r3, #16
 8003d48:	e7b0      	b.n	8003cac <_printf_i+0xfc>
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	f043 0320 	orr.w	r3, r3, #32
 8003d50:	6023      	str	r3, [r4, #0]
 8003d52:	2378      	movs	r3, #120	; 0x78
 8003d54:	4828      	ldr	r0, [pc, #160]	; (8003df8 <_printf_i+0x248>)
 8003d56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d5a:	e7e3      	b.n	8003d24 <_printf_i+0x174>
 8003d5c:	0659      	lsls	r1, r3, #25
 8003d5e:	bf48      	it	mi
 8003d60:	b2b6      	uxthmi	r6, r6
 8003d62:	e7e6      	b.n	8003d32 <_printf_i+0x182>
 8003d64:	4615      	mov	r5, r2
 8003d66:	e7bb      	b.n	8003ce0 <_printf_i+0x130>
 8003d68:	682b      	ldr	r3, [r5, #0]
 8003d6a:	6826      	ldr	r6, [r4, #0]
 8003d6c:	6961      	ldr	r1, [r4, #20]
 8003d6e:	1d18      	adds	r0, r3, #4
 8003d70:	6028      	str	r0, [r5, #0]
 8003d72:	0635      	lsls	r5, r6, #24
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	d501      	bpl.n	8003d7c <_printf_i+0x1cc>
 8003d78:	6019      	str	r1, [r3, #0]
 8003d7a:	e002      	b.n	8003d82 <_printf_i+0x1d2>
 8003d7c:	0670      	lsls	r0, r6, #25
 8003d7e:	d5fb      	bpl.n	8003d78 <_printf_i+0x1c8>
 8003d80:	8019      	strh	r1, [r3, #0]
 8003d82:	2300      	movs	r3, #0
 8003d84:	6123      	str	r3, [r4, #16]
 8003d86:	4615      	mov	r5, r2
 8003d88:	e7ba      	b.n	8003d00 <_printf_i+0x150>
 8003d8a:	682b      	ldr	r3, [r5, #0]
 8003d8c:	1d1a      	adds	r2, r3, #4
 8003d8e:	602a      	str	r2, [r5, #0]
 8003d90:	681d      	ldr	r5, [r3, #0]
 8003d92:	6862      	ldr	r2, [r4, #4]
 8003d94:	2100      	movs	r1, #0
 8003d96:	4628      	mov	r0, r5
 8003d98:	f7fc fa2a 	bl	80001f0 <memchr>
 8003d9c:	b108      	cbz	r0, 8003da2 <_printf_i+0x1f2>
 8003d9e:	1b40      	subs	r0, r0, r5
 8003da0:	6060      	str	r0, [r4, #4]
 8003da2:	6863      	ldr	r3, [r4, #4]
 8003da4:	6123      	str	r3, [r4, #16]
 8003da6:	2300      	movs	r3, #0
 8003da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dac:	e7a8      	b.n	8003d00 <_printf_i+0x150>
 8003dae:	6923      	ldr	r3, [r4, #16]
 8003db0:	462a      	mov	r2, r5
 8003db2:	4649      	mov	r1, r9
 8003db4:	4640      	mov	r0, r8
 8003db6:	47d0      	blx	sl
 8003db8:	3001      	adds	r0, #1
 8003dba:	d0ab      	beq.n	8003d14 <_printf_i+0x164>
 8003dbc:	6823      	ldr	r3, [r4, #0]
 8003dbe:	079b      	lsls	r3, r3, #30
 8003dc0:	d413      	bmi.n	8003dea <_printf_i+0x23a>
 8003dc2:	68e0      	ldr	r0, [r4, #12]
 8003dc4:	9b03      	ldr	r3, [sp, #12]
 8003dc6:	4298      	cmp	r0, r3
 8003dc8:	bfb8      	it	lt
 8003dca:	4618      	movlt	r0, r3
 8003dcc:	e7a4      	b.n	8003d18 <_printf_i+0x168>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	4632      	mov	r2, r6
 8003dd2:	4649      	mov	r1, r9
 8003dd4:	4640      	mov	r0, r8
 8003dd6:	47d0      	blx	sl
 8003dd8:	3001      	adds	r0, #1
 8003dda:	d09b      	beq.n	8003d14 <_printf_i+0x164>
 8003ddc:	3501      	adds	r5, #1
 8003dde:	68e3      	ldr	r3, [r4, #12]
 8003de0:	9903      	ldr	r1, [sp, #12]
 8003de2:	1a5b      	subs	r3, r3, r1
 8003de4:	42ab      	cmp	r3, r5
 8003de6:	dcf2      	bgt.n	8003dce <_printf_i+0x21e>
 8003de8:	e7eb      	b.n	8003dc2 <_printf_i+0x212>
 8003dea:	2500      	movs	r5, #0
 8003dec:	f104 0619 	add.w	r6, r4, #25
 8003df0:	e7f5      	b.n	8003dde <_printf_i+0x22e>
 8003df2:	bf00      	nop
 8003df4:	08004115 	.word	0x08004115
 8003df8:	08004126 	.word	0x08004126

08003dfc <memcpy>:
 8003dfc:	440a      	add	r2, r1
 8003dfe:	4291      	cmp	r1, r2
 8003e00:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e04:	d100      	bne.n	8003e08 <memcpy+0xc>
 8003e06:	4770      	bx	lr
 8003e08:	b510      	push	{r4, lr}
 8003e0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e12:	4291      	cmp	r1, r2
 8003e14:	d1f9      	bne.n	8003e0a <memcpy+0xe>
 8003e16:	bd10      	pop	{r4, pc}

08003e18 <memmove>:
 8003e18:	4288      	cmp	r0, r1
 8003e1a:	b510      	push	{r4, lr}
 8003e1c:	eb01 0402 	add.w	r4, r1, r2
 8003e20:	d902      	bls.n	8003e28 <memmove+0x10>
 8003e22:	4284      	cmp	r4, r0
 8003e24:	4623      	mov	r3, r4
 8003e26:	d807      	bhi.n	8003e38 <memmove+0x20>
 8003e28:	1e43      	subs	r3, r0, #1
 8003e2a:	42a1      	cmp	r1, r4
 8003e2c:	d008      	beq.n	8003e40 <memmove+0x28>
 8003e2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e36:	e7f8      	b.n	8003e2a <memmove+0x12>
 8003e38:	4402      	add	r2, r0
 8003e3a:	4601      	mov	r1, r0
 8003e3c:	428a      	cmp	r2, r1
 8003e3e:	d100      	bne.n	8003e42 <memmove+0x2a>
 8003e40:	bd10      	pop	{r4, pc}
 8003e42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e4a:	e7f7      	b.n	8003e3c <memmove+0x24>

08003e4c <_free_r>:
 8003e4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e4e:	2900      	cmp	r1, #0
 8003e50:	d044      	beq.n	8003edc <_free_r+0x90>
 8003e52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e56:	9001      	str	r0, [sp, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f1a1 0404 	sub.w	r4, r1, #4
 8003e5e:	bfb8      	it	lt
 8003e60:	18e4      	addlt	r4, r4, r3
 8003e62:	f000 f913 	bl	800408c <__malloc_lock>
 8003e66:	4a1e      	ldr	r2, [pc, #120]	; (8003ee0 <_free_r+0x94>)
 8003e68:	9801      	ldr	r0, [sp, #4]
 8003e6a:	6813      	ldr	r3, [r2, #0]
 8003e6c:	b933      	cbnz	r3, 8003e7c <_free_r+0x30>
 8003e6e:	6063      	str	r3, [r4, #4]
 8003e70:	6014      	str	r4, [r2, #0]
 8003e72:	b003      	add	sp, #12
 8003e74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e78:	f000 b90e 	b.w	8004098 <__malloc_unlock>
 8003e7c:	42a3      	cmp	r3, r4
 8003e7e:	d908      	bls.n	8003e92 <_free_r+0x46>
 8003e80:	6825      	ldr	r5, [r4, #0]
 8003e82:	1961      	adds	r1, r4, r5
 8003e84:	428b      	cmp	r3, r1
 8003e86:	bf01      	itttt	eq
 8003e88:	6819      	ldreq	r1, [r3, #0]
 8003e8a:	685b      	ldreq	r3, [r3, #4]
 8003e8c:	1949      	addeq	r1, r1, r5
 8003e8e:	6021      	streq	r1, [r4, #0]
 8003e90:	e7ed      	b.n	8003e6e <_free_r+0x22>
 8003e92:	461a      	mov	r2, r3
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	b10b      	cbz	r3, 8003e9c <_free_r+0x50>
 8003e98:	42a3      	cmp	r3, r4
 8003e9a:	d9fa      	bls.n	8003e92 <_free_r+0x46>
 8003e9c:	6811      	ldr	r1, [r2, #0]
 8003e9e:	1855      	adds	r5, r2, r1
 8003ea0:	42a5      	cmp	r5, r4
 8003ea2:	d10b      	bne.n	8003ebc <_free_r+0x70>
 8003ea4:	6824      	ldr	r4, [r4, #0]
 8003ea6:	4421      	add	r1, r4
 8003ea8:	1854      	adds	r4, r2, r1
 8003eaa:	42a3      	cmp	r3, r4
 8003eac:	6011      	str	r1, [r2, #0]
 8003eae:	d1e0      	bne.n	8003e72 <_free_r+0x26>
 8003eb0:	681c      	ldr	r4, [r3, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	6053      	str	r3, [r2, #4]
 8003eb6:	4421      	add	r1, r4
 8003eb8:	6011      	str	r1, [r2, #0]
 8003eba:	e7da      	b.n	8003e72 <_free_r+0x26>
 8003ebc:	d902      	bls.n	8003ec4 <_free_r+0x78>
 8003ebe:	230c      	movs	r3, #12
 8003ec0:	6003      	str	r3, [r0, #0]
 8003ec2:	e7d6      	b.n	8003e72 <_free_r+0x26>
 8003ec4:	6825      	ldr	r5, [r4, #0]
 8003ec6:	1961      	adds	r1, r4, r5
 8003ec8:	428b      	cmp	r3, r1
 8003eca:	bf04      	itt	eq
 8003ecc:	6819      	ldreq	r1, [r3, #0]
 8003ece:	685b      	ldreq	r3, [r3, #4]
 8003ed0:	6063      	str	r3, [r4, #4]
 8003ed2:	bf04      	itt	eq
 8003ed4:	1949      	addeq	r1, r1, r5
 8003ed6:	6021      	streq	r1, [r4, #0]
 8003ed8:	6054      	str	r4, [r2, #4]
 8003eda:	e7ca      	b.n	8003e72 <_free_r+0x26>
 8003edc:	b003      	add	sp, #12
 8003ede:	bd30      	pop	{r4, r5, pc}
 8003ee0:	200002c8 	.word	0x200002c8

08003ee4 <sbrk_aligned>:
 8003ee4:	b570      	push	{r4, r5, r6, lr}
 8003ee6:	4e0e      	ldr	r6, [pc, #56]	; (8003f20 <sbrk_aligned+0x3c>)
 8003ee8:	460c      	mov	r4, r1
 8003eea:	6831      	ldr	r1, [r6, #0]
 8003eec:	4605      	mov	r5, r0
 8003eee:	b911      	cbnz	r1, 8003ef6 <sbrk_aligned+0x12>
 8003ef0:	f000 f8bc 	bl	800406c <_sbrk_r>
 8003ef4:	6030      	str	r0, [r6, #0]
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	4628      	mov	r0, r5
 8003efa:	f000 f8b7 	bl	800406c <_sbrk_r>
 8003efe:	1c43      	adds	r3, r0, #1
 8003f00:	d00a      	beq.n	8003f18 <sbrk_aligned+0x34>
 8003f02:	1cc4      	adds	r4, r0, #3
 8003f04:	f024 0403 	bic.w	r4, r4, #3
 8003f08:	42a0      	cmp	r0, r4
 8003f0a:	d007      	beq.n	8003f1c <sbrk_aligned+0x38>
 8003f0c:	1a21      	subs	r1, r4, r0
 8003f0e:	4628      	mov	r0, r5
 8003f10:	f000 f8ac 	bl	800406c <_sbrk_r>
 8003f14:	3001      	adds	r0, #1
 8003f16:	d101      	bne.n	8003f1c <sbrk_aligned+0x38>
 8003f18:	f04f 34ff 	mov.w	r4, #4294967295
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	bd70      	pop	{r4, r5, r6, pc}
 8003f20:	200002cc 	.word	0x200002cc

08003f24 <_malloc_r>:
 8003f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f28:	1ccd      	adds	r5, r1, #3
 8003f2a:	f025 0503 	bic.w	r5, r5, #3
 8003f2e:	3508      	adds	r5, #8
 8003f30:	2d0c      	cmp	r5, #12
 8003f32:	bf38      	it	cc
 8003f34:	250c      	movcc	r5, #12
 8003f36:	2d00      	cmp	r5, #0
 8003f38:	4607      	mov	r7, r0
 8003f3a:	db01      	blt.n	8003f40 <_malloc_r+0x1c>
 8003f3c:	42a9      	cmp	r1, r5
 8003f3e:	d905      	bls.n	8003f4c <_malloc_r+0x28>
 8003f40:	230c      	movs	r3, #12
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	2600      	movs	r6, #0
 8003f46:	4630      	mov	r0, r6
 8003f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f4c:	4e2e      	ldr	r6, [pc, #184]	; (8004008 <_malloc_r+0xe4>)
 8003f4e:	f000 f89d 	bl	800408c <__malloc_lock>
 8003f52:	6833      	ldr	r3, [r6, #0]
 8003f54:	461c      	mov	r4, r3
 8003f56:	bb34      	cbnz	r4, 8003fa6 <_malloc_r+0x82>
 8003f58:	4629      	mov	r1, r5
 8003f5a:	4638      	mov	r0, r7
 8003f5c:	f7ff ffc2 	bl	8003ee4 <sbrk_aligned>
 8003f60:	1c43      	adds	r3, r0, #1
 8003f62:	4604      	mov	r4, r0
 8003f64:	d14d      	bne.n	8004002 <_malloc_r+0xde>
 8003f66:	6834      	ldr	r4, [r6, #0]
 8003f68:	4626      	mov	r6, r4
 8003f6a:	2e00      	cmp	r6, #0
 8003f6c:	d140      	bne.n	8003ff0 <_malloc_r+0xcc>
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	4631      	mov	r1, r6
 8003f72:	4638      	mov	r0, r7
 8003f74:	eb04 0803 	add.w	r8, r4, r3
 8003f78:	f000 f878 	bl	800406c <_sbrk_r>
 8003f7c:	4580      	cmp	r8, r0
 8003f7e:	d13a      	bne.n	8003ff6 <_malloc_r+0xd2>
 8003f80:	6821      	ldr	r1, [r4, #0]
 8003f82:	3503      	adds	r5, #3
 8003f84:	1a6d      	subs	r5, r5, r1
 8003f86:	f025 0503 	bic.w	r5, r5, #3
 8003f8a:	3508      	adds	r5, #8
 8003f8c:	2d0c      	cmp	r5, #12
 8003f8e:	bf38      	it	cc
 8003f90:	250c      	movcc	r5, #12
 8003f92:	4629      	mov	r1, r5
 8003f94:	4638      	mov	r0, r7
 8003f96:	f7ff ffa5 	bl	8003ee4 <sbrk_aligned>
 8003f9a:	3001      	adds	r0, #1
 8003f9c:	d02b      	beq.n	8003ff6 <_malloc_r+0xd2>
 8003f9e:	6823      	ldr	r3, [r4, #0]
 8003fa0:	442b      	add	r3, r5
 8003fa2:	6023      	str	r3, [r4, #0]
 8003fa4:	e00e      	b.n	8003fc4 <_malloc_r+0xa0>
 8003fa6:	6822      	ldr	r2, [r4, #0]
 8003fa8:	1b52      	subs	r2, r2, r5
 8003faa:	d41e      	bmi.n	8003fea <_malloc_r+0xc6>
 8003fac:	2a0b      	cmp	r2, #11
 8003fae:	d916      	bls.n	8003fde <_malloc_r+0xba>
 8003fb0:	1961      	adds	r1, r4, r5
 8003fb2:	42a3      	cmp	r3, r4
 8003fb4:	6025      	str	r5, [r4, #0]
 8003fb6:	bf18      	it	ne
 8003fb8:	6059      	strne	r1, [r3, #4]
 8003fba:	6863      	ldr	r3, [r4, #4]
 8003fbc:	bf08      	it	eq
 8003fbe:	6031      	streq	r1, [r6, #0]
 8003fc0:	5162      	str	r2, [r4, r5]
 8003fc2:	604b      	str	r3, [r1, #4]
 8003fc4:	4638      	mov	r0, r7
 8003fc6:	f104 060b 	add.w	r6, r4, #11
 8003fca:	f000 f865 	bl	8004098 <__malloc_unlock>
 8003fce:	f026 0607 	bic.w	r6, r6, #7
 8003fd2:	1d23      	adds	r3, r4, #4
 8003fd4:	1af2      	subs	r2, r6, r3
 8003fd6:	d0b6      	beq.n	8003f46 <_malloc_r+0x22>
 8003fd8:	1b9b      	subs	r3, r3, r6
 8003fda:	50a3      	str	r3, [r4, r2]
 8003fdc:	e7b3      	b.n	8003f46 <_malloc_r+0x22>
 8003fde:	6862      	ldr	r2, [r4, #4]
 8003fe0:	42a3      	cmp	r3, r4
 8003fe2:	bf0c      	ite	eq
 8003fe4:	6032      	streq	r2, [r6, #0]
 8003fe6:	605a      	strne	r2, [r3, #4]
 8003fe8:	e7ec      	b.n	8003fc4 <_malloc_r+0xa0>
 8003fea:	4623      	mov	r3, r4
 8003fec:	6864      	ldr	r4, [r4, #4]
 8003fee:	e7b2      	b.n	8003f56 <_malloc_r+0x32>
 8003ff0:	4634      	mov	r4, r6
 8003ff2:	6876      	ldr	r6, [r6, #4]
 8003ff4:	e7b9      	b.n	8003f6a <_malloc_r+0x46>
 8003ff6:	230c      	movs	r3, #12
 8003ff8:	603b      	str	r3, [r7, #0]
 8003ffa:	4638      	mov	r0, r7
 8003ffc:	f000 f84c 	bl	8004098 <__malloc_unlock>
 8004000:	e7a1      	b.n	8003f46 <_malloc_r+0x22>
 8004002:	6025      	str	r5, [r4, #0]
 8004004:	e7de      	b.n	8003fc4 <_malloc_r+0xa0>
 8004006:	bf00      	nop
 8004008:	200002c8 	.word	0x200002c8

0800400c <_realloc_r>:
 800400c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004010:	4680      	mov	r8, r0
 8004012:	4614      	mov	r4, r2
 8004014:	460e      	mov	r6, r1
 8004016:	b921      	cbnz	r1, 8004022 <_realloc_r+0x16>
 8004018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800401c:	4611      	mov	r1, r2
 800401e:	f7ff bf81 	b.w	8003f24 <_malloc_r>
 8004022:	b92a      	cbnz	r2, 8004030 <_realloc_r+0x24>
 8004024:	f7ff ff12 	bl	8003e4c <_free_r>
 8004028:	4625      	mov	r5, r4
 800402a:	4628      	mov	r0, r5
 800402c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004030:	f000 f838 	bl	80040a4 <_malloc_usable_size_r>
 8004034:	4284      	cmp	r4, r0
 8004036:	4607      	mov	r7, r0
 8004038:	d802      	bhi.n	8004040 <_realloc_r+0x34>
 800403a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800403e:	d812      	bhi.n	8004066 <_realloc_r+0x5a>
 8004040:	4621      	mov	r1, r4
 8004042:	4640      	mov	r0, r8
 8004044:	f7ff ff6e 	bl	8003f24 <_malloc_r>
 8004048:	4605      	mov	r5, r0
 800404a:	2800      	cmp	r0, #0
 800404c:	d0ed      	beq.n	800402a <_realloc_r+0x1e>
 800404e:	42bc      	cmp	r4, r7
 8004050:	4622      	mov	r2, r4
 8004052:	4631      	mov	r1, r6
 8004054:	bf28      	it	cs
 8004056:	463a      	movcs	r2, r7
 8004058:	f7ff fed0 	bl	8003dfc <memcpy>
 800405c:	4631      	mov	r1, r6
 800405e:	4640      	mov	r0, r8
 8004060:	f7ff fef4 	bl	8003e4c <_free_r>
 8004064:	e7e1      	b.n	800402a <_realloc_r+0x1e>
 8004066:	4635      	mov	r5, r6
 8004068:	e7df      	b.n	800402a <_realloc_r+0x1e>
	...

0800406c <_sbrk_r>:
 800406c:	b538      	push	{r3, r4, r5, lr}
 800406e:	4d06      	ldr	r5, [pc, #24]	; (8004088 <_sbrk_r+0x1c>)
 8004070:	2300      	movs	r3, #0
 8004072:	4604      	mov	r4, r0
 8004074:	4608      	mov	r0, r1
 8004076:	602b      	str	r3, [r5, #0]
 8004078:	f7fc fd2a 	bl	8000ad0 <_sbrk>
 800407c:	1c43      	adds	r3, r0, #1
 800407e:	d102      	bne.n	8004086 <_sbrk_r+0x1a>
 8004080:	682b      	ldr	r3, [r5, #0]
 8004082:	b103      	cbz	r3, 8004086 <_sbrk_r+0x1a>
 8004084:	6023      	str	r3, [r4, #0]
 8004086:	bd38      	pop	{r3, r4, r5, pc}
 8004088:	200002d0 	.word	0x200002d0

0800408c <__malloc_lock>:
 800408c:	4801      	ldr	r0, [pc, #4]	; (8004094 <__malloc_lock+0x8>)
 800408e:	f000 b811 	b.w	80040b4 <__retarget_lock_acquire_recursive>
 8004092:	bf00      	nop
 8004094:	200002d4 	.word	0x200002d4

08004098 <__malloc_unlock>:
 8004098:	4801      	ldr	r0, [pc, #4]	; (80040a0 <__malloc_unlock+0x8>)
 800409a:	f000 b80c 	b.w	80040b6 <__retarget_lock_release_recursive>
 800409e:	bf00      	nop
 80040a0:	200002d4 	.word	0x200002d4

080040a4 <_malloc_usable_size_r>:
 80040a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040a8:	1f18      	subs	r0, r3, #4
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	bfbc      	itt	lt
 80040ae:	580b      	ldrlt	r3, [r1, r0]
 80040b0:	18c0      	addlt	r0, r0, r3
 80040b2:	4770      	bx	lr

080040b4 <__retarget_lock_acquire_recursive>:
 80040b4:	4770      	bx	lr

080040b6 <__retarget_lock_release_recursive>:
 80040b6:	4770      	bx	lr

080040b8 <_init>:
 80040b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ba:	bf00      	nop
 80040bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040be:	bc08      	pop	{r3}
 80040c0:	469e      	mov	lr, r3
 80040c2:	4770      	bx	lr

080040c4 <_fini>:
 80040c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c6:	bf00      	nop
 80040c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ca:	bc08      	pop	{r3}
 80040cc:	469e      	mov	lr, r3
 80040ce:	4770      	bx	lr
